
smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003476  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000140  00800060  00003476  0000350a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008001a0  008001a0  0000364a  2**0
                  ALLOC
  3 .stab         000026dc  00000000  00000000  0000364c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000db0  00000000  00000000  00005d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009275  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a5fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b7d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b994  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bc8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 48 15 	call	0x2a90	; 0x2a90 <main>
      8a:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bd 19 	jmp	0x337a	; 0x337a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e9       	ldi	r26, 0x98	; 152
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bd 19 	jmp	0x337a	; 0x337a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 e9       	ldi	r24, 0x98	; 152
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c5 19 	jmp	0x338a	; 0x338a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e9       	ldi	r22, 0x98	; 152
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c5 19 	jmp	0x338a	; 0x338a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e0 56       	subi	r30, 0x60	; 96
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <MDIO_voidSetPinDirection>:
 * OUTPUT      : none (void)
 *
 **************************************************************************************************/

void MDIO_voidSetPinDirection (uint8 copy_uint8PORT, uint8 copy_uint8PIN, uint8 copy_uint8MODE)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	29 97       	sbiw	r28, 0x09	; 9
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	6a 83       	std	Y+2, r22	; 0x02
     e46:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((copy_uint8PORT <= PORTD) && (copy_uint8PIN <= PIN7))
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	84 30       	cpi	r24, 0x04	; 4
     e4c:	08 f0       	brcs	.+2      	; 0xe50 <MDIO_voidSetPinDirection+0x22>
     e4e:	b0 c1       	rjmp	.+864    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	88 30       	cpi	r24, 0x08	; 8
     e54:	08 f0       	brcs	.+2      	; 0xe58 <MDIO_voidSetPinDirection+0x2a>
     e56:	ac c1       	rjmp	.+856    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
	{
		if ( copy_uint8MODE == OUTPUT )
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	09 f0       	breq	.+2      	; 0xe60 <MDIO_voidSetPinDirection+0x32>
     e5e:	6f c0       	rjmp	.+222    	; 0xf3e <MDIO_voidSetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (copy_uint8PORT)
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	39 87       	std	Y+9, r19	; 0x09
     e68:	28 87       	std	Y+8, r18	; 0x08
     e6a:	88 85       	ldd	r24, Y+8	; 0x08
     e6c:	99 85       	ldd	r25, Y+9	; 0x09
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	91 05       	cpc	r25, r1
     e72:	49 f1       	breq	.+82     	; 0xec6 <MDIO_voidSetPinDirection+0x98>
     e74:	28 85       	ldd	r18, Y+8	; 0x08
     e76:	39 85       	ldd	r19, Y+9	; 0x09
     e78:	22 30       	cpi	r18, 0x02	; 2
     e7a:	31 05       	cpc	r19, r1
     e7c:	2c f4       	brge	.+10     	; 0xe88 <MDIO_voidSetPinDirection+0x5a>
     e7e:	88 85       	ldd	r24, Y+8	; 0x08
     e80:	99 85       	ldd	r25, Y+9	; 0x09
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	61 f0       	breq	.+24     	; 0xe9e <MDIO_voidSetPinDirection+0x70>
     e86:	94 c1       	rjmp	.+808    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
     e88:	28 85       	ldd	r18, Y+8	; 0x08
     e8a:	39 85       	ldd	r19, Y+9	; 0x09
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	31 05       	cpc	r19, r1
     e90:	71 f1       	breq	.+92     	; 0xeee <MDIO_voidSetPinDirection+0xc0>
     e92:	88 85       	ldd	r24, Y+8	; 0x08
     e94:	99 85       	ldd	r25, Y+9	; 0x09
     e96:	83 30       	cpi	r24, 0x03	; 3
     e98:	91 05       	cpc	r25, r1
     e9a:	e9 f1       	breq	.+122    	; 0xf16 <MDIO_voidSetPinDirection+0xe8>
     e9c:	89 c1       	rjmp	.+786    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
			{
				case PORTA: SET_BIT(DDRA_Register,copy_uint8PIN); break;
     e9e:	aa e3       	ldi	r26, 0x3A	; 58
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ea e3       	ldi	r30, 0x3A	; 58
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <MDIO_voidSetPinDirection+0x8e>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <MDIO_voidSetPinDirection+0x8a>
     ec0:	84 2b       	or	r24, r20
     ec2:	8c 93       	st	X, r24
     ec4:	75 c1       	rjmp	.+746    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
				case PORTB: SET_BIT(DDRB_Register,copy_uint8PIN); break;
     ec6:	a7 e3       	ldi	r26, 0x37	; 55
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e7 e3       	ldi	r30, 0x37	; 55
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <MDIO_voidSetPinDirection+0xb6>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <MDIO_voidSetPinDirection+0xb2>
     ee8:	84 2b       	or	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	61 c1       	rjmp	.+706    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
				case PORTC: SET_BIT(DDRC_Register,copy_uint8PIN); break;
     eee:	a4 e3       	ldi	r26, 0x34	; 52
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e4 e3       	ldi	r30, 0x34	; 52
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <MDIO_voidSetPinDirection+0xde>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <MDIO_voidSetPinDirection+0xda>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	4d c1       	rjmp	.+666    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
				case PORTD: SET_BIT(DDRD_Register,copy_uint8PIN); break;
     f16:	a1 e3       	ldi	r26, 0x31	; 49
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e1 e3       	ldi	r30, 0x31	; 49
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <MDIO_voidSetPinDirection+0x106>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <MDIO_voidSetPinDirection+0x102>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	39 c1       	rjmp	.+626    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
			}
		}
		
		else if ( copy_uint8MODE == INPUT )
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	88 23       	and	r24, r24
     f42:	09 f0       	breq	.+2      	; 0xf46 <MDIO_voidSetPinDirection+0x118>
     f44:	74 c0       	rjmp	.+232    	; 0x102e <MDIO_voidSetPinDirection+0x200>
		{
			/* Check on the Required PORT Number */
			switch (copy_uint8PORT)
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	3f 83       	std	Y+7, r19	; 0x07
     f4e:	2e 83       	std	Y+6, r18	; 0x06
     f50:	8e 81       	ldd	r24, Y+6	; 0x06
     f52:	9f 81       	ldd	r25, Y+7	; 0x07
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	91 05       	cpc	r25, r1
     f58:	59 f1       	breq	.+86     	; 0xfb0 <MDIO_voidSetPinDirection+0x182>
     f5a:	2e 81       	ldd	r18, Y+6	; 0x06
     f5c:	3f 81       	ldd	r19, Y+7	; 0x07
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	2c f4       	brge	.+10     	; 0xf6e <MDIO_voidSetPinDirection+0x140>
     f64:	8e 81       	ldd	r24, Y+6	; 0x06
     f66:	9f 81       	ldd	r25, Y+7	; 0x07
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	69 f0       	breq	.+26     	; 0xf86 <MDIO_voidSetPinDirection+0x158>
     f6c:	21 c1       	rjmp	.+578    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
     f6e:	2e 81       	ldd	r18, Y+6	; 0x06
     f70:	3f 81       	ldd	r19, Y+7	; 0x07
     f72:	22 30       	cpi	r18, 0x02	; 2
     f74:	31 05       	cpc	r19, r1
     f76:	89 f1       	breq	.+98     	; 0xfda <MDIO_voidSetPinDirection+0x1ac>
     f78:	8e 81       	ldd	r24, Y+6	; 0x06
     f7a:	9f 81       	ldd	r25, Y+7	; 0x07
     f7c:	83 30       	cpi	r24, 0x03	; 3
     f7e:	91 05       	cpc	r25, r1
     f80:	09 f4       	brne	.+2      	; 0xf84 <MDIO_voidSetPinDirection+0x156>
     f82:	40 c0       	rjmp	.+128    	; 0x1004 <MDIO_voidSetPinDirection+0x1d6>
     f84:	15 c1       	rjmp	.+554    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
			{
				case PORTA: CLR_BIT(DDRA_Register,copy_uint8PIN); break;
     f86:	aa e3       	ldi	r26, 0x3A	; 58
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ea e3       	ldi	r30, 0x3A	; 58
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <MDIO_voidSetPinDirection+0x176>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <MDIO_voidSetPinDirection+0x172>
     fa8:	80 95       	com	r24
     faa:	84 23       	and	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	00 c1       	rjmp	.+512    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
				case PORTB: CLR_BIT(DDRB_Register,copy_uint8PIN); break;
     fb0:	a7 e3       	ldi	r26, 0x37	; 55
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e7 e3       	ldi	r30, 0x37	; 55
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <MDIO_voidSetPinDirection+0x1a0>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <MDIO_voidSetPinDirection+0x19c>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	eb c0       	rjmp	.+470    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
				case PORTC: CLR_BIT(DDRC_Register,copy_uint8PIN); break;
     fda:	a4 e3       	ldi	r26, 0x34	; 52
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e4 e3       	ldi	r30, 0x34	; 52
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <MDIO_voidSetPinDirection+0x1ca>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <MDIO_voidSetPinDirection+0x1c6>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	d6 c0       	rjmp	.+428    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
				case PORTD: CLR_BIT(DDRD_Register,copy_uint8PIN); break;
    1004:	a1 e3       	ldi	r26, 0x31	; 49
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e1 e3       	ldi	r30, 0x31	; 49
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <MDIO_voidSetPinDirection+0x1f4>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <MDIO_voidSetPinDirection+0x1f0>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	c1 c0       	rjmp	.+386    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
			}
		}
		else if ( copy_uint8MODE == INPUT_PULL_UP )
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	09 f0       	breq	.+2      	; 0x1036 <MDIO_voidSetPinDirection+0x208>
    1034:	bd c0       	rjmp	.+378    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
		{
			/* Check on the Required PORT Number */
			switch (copy_uint8PORT)
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	3d 83       	std	Y+5, r19	; 0x05
    103e:	2c 83       	std	Y+4, r18	; 0x04
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	91 05       	cpc	r25, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <MDIO_voidSetPinDirection+0x21e>
    104a:	3e c0       	rjmp	.+124    	; 0x10c8 <MDIO_voidSetPinDirection+0x29a>
    104c:	2c 81       	ldd	r18, Y+4	; 0x04
    104e:	3d 81       	ldd	r19, Y+5	; 0x05
    1050:	22 30       	cpi	r18, 0x02	; 2
    1052:	31 05       	cpc	r19, r1
    1054:	2c f4       	brge	.+10     	; 0x1060 <MDIO_voidSetPinDirection+0x232>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	71 f0       	breq	.+28     	; 0x107a <MDIO_voidSetPinDirection+0x24c>
    105e:	a8 c0       	rjmp	.+336    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
    1060:	2c 81       	ldd	r18, Y+4	; 0x04
    1062:	3d 81       	ldd	r19, Y+5	; 0x05
    1064:	22 30       	cpi	r18, 0x02	; 2
    1066:	31 05       	cpc	r19, r1
    1068:	09 f4       	brne	.+2      	; 0x106c <MDIO_voidSetPinDirection+0x23e>
    106a:	55 c0       	rjmp	.+170    	; 0x1116 <MDIO_voidSetPinDirection+0x2e8>
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	9d 81       	ldd	r25, Y+5	; 0x05
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	91 05       	cpc	r25, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <MDIO_voidSetPinDirection+0x24a>
    1076:	76 c0       	rjmp	.+236    	; 0x1164 <MDIO_voidSetPinDirection+0x336>
    1078:	9b c0       	rjmp	.+310    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
			{
				case PORTA: CLR_BIT(DDRA_Register,copy_uint8PIN); SET_BIT(PORTA_Register,copy_uint8PIN); break;
    107a:	aa e3       	ldi	r26, 0x3A	; 58
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	ea e3       	ldi	r30, 0x3A	; 58
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <MDIO_voidSetPinDirection+0x268>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	2a 95       	dec	r18
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <MDIO_voidSetPinDirection+0x264>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	ab e3       	ldi	r26, 0x3B	; 59
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	eb e3       	ldi	r30, 0x3B	; 59
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <MDIO_voidSetPinDirection+0x290>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <MDIO_voidSetPinDirection+0x28c>
    10c2:	84 2b       	or	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	74 c0       	rjmp	.+232    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
				case PORTB: CLR_BIT(DDRB_Register,copy_uint8PIN); SET_BIT(PORTB_Register,copy_uint8PIN); break;
    10c8:	a7 e3       	ldi	r26, 0x37	; 55
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e7 e3       	ldi	r30, 0x37	; 55
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <MDIO_voidSetPinDirection+0x2b6>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	2a 95       	dec	r18
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <MDIO_voidSetPinDirection+0x2b2>
    10e8:	80 95       	com	r24
    10ea:	84 23       	and	r24, r20
    10ec:	8c 93       	st	X, r24
    10ee:	a8 e3       	ldi	r26, 0x38	; 56
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 e3       	ldi	r30, 0x38	; 56
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <MDIO_voidSetPinDirection+0x2de>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <MDIO_voidSetPinDirection+0x2da>
    1110:	84 2b       	or	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	4d c0       	rjmp	.+154    	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
				case PORTC: CLR_BIT(DDRC_Register,copy_uint8PIN); SET_BIT(PORTD_Register,copy_uint8PIN); break;
    1116:	a4 e3       	ldi	r26, 0x34	; 52
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e4 e3       	ldi	r30, 0x34	; 52
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <MDIO_voidSetPinDirection+0x304>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	2a 95       	dec	r18
    1134:	e2 f7       	brpl	.-8      	; 0x112e <MDIO_voidSetPinDirection+0x300>
    1136:	80 95       	com	r24
    1138:	84 23       	and	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	a2 e3       	ldi	r26, 0x32	; 50
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e2 e3       	ldi	r30, 0x32	; 50
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <MDIO_voidSetPinDirection+0x32c>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <MDIO_voidSetPinDirection+0x328>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	26 c0       	rjmp	.+76     	; 0x11b0 <MDIO_voidSetPinDirection+0x382>
				case PORTD: CLR_BIT(DDRD_Register,copy_uint8PIN); SET_BIT(PORTC_Register,copy_uint8PIN); break;
    1164:	a1 e3       	ldi	r26, 0x31	; 49
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e1 e3       	ldi	r30, 0x31	; 49
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <MDIO_voidSetPinDirection+0x352>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	2a 95       	dec	r18
    1182:	e2 f7       	brpl	.-8      	; 0x117c <MDIO_voidSetPinDirection+0x34e>
    1184:	80 95       	com	r24
    1186:	84 23       	and	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	a5 e3       	ldi	r26, 0x35	; 53
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e5 e3       	ldi	r30, 0x35	; 53
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <MDIO_voidSetPinDirection+0x37a>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <MDIO_voidSetPinDirection+0x376>
    11ac:	84 2b       	or	r24, r20
    11ae:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    11b0:	29 96       	adiw	r28, 0x09	; 9
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <MDIO_voidSetPinValue>:
 *
 * OUTPUT      : none (void)
 *
 **************************************************************************************************/
void MDIO_voidSetPinValue(uint8 copy_uint8PORT , uint8 copy_uint8PIN, uint8 copy_uint8Value)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	29 97       	sbiw	r28, 0x09	; 9
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	6a 83       	std	Y+2, r22	; 0x02
    11da:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((copy_uint8PORT <= PORTD) && (copy_uint8PIN <= PIN7))
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	84 30       	cpi	r24, 0x04	; 4
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <MDIO_voidSetPinValue+0x22>
    11e2:	61 c1       	rjmp	.+706    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	88 30       	cpi	r24, 0x08	; 8
    11e8:	08 f0       	brcs	.+2      	; 0x11ec <MDIO_voidSetPinValue+0x2a>
    11ea:	5d c1       	rjmp	.+698    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
	{
		if (copy_uint8Value == HIGH)
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <MDIO_voidSetPinValue+0x32>
    11f2:	6f c0       	rjmp	.+222    	; 0x12d2 <MDIO_voidSetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (copy_uint8PORT)
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	39 87       	std	Y+9, r19	; 0x09
    11fc:	28 87       	std	Y+8, r18	; 0x08
    11fe:	88 85       	ldd	r24, Y+8	; 0x08
    1200:	99 85       	ldd	r25, Y+9	; 0x09
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	91 05       	cpc	r25, r1
    1206:	49 f1       	breq	.+82     	; 0x125a <MDIO_voidSetPinValue+0x98>
    1208:	28 85       	ldd	r18, Y+8	; 0x08
    120a:	39 85       	ldd	r19, Y+9	; 0x09
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	31 05       	cpc	r19, r1
    1210:	2c f4       	brge	.+10     	; 0x121c <MDIO_voidSetPinValue+0x5a>
    1212:	88 85       	ldd	r24, Y+8	; 0x08
    1214:	99 85       	ldd	r25, Y+9	; 0x09
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	61 f0       	breq	.+24     	; 0x1232 <MDIO_voidSetPinValue+0x70>
    121a:	45 c1       	rjmp	.+650    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
    121c:	28 85       	ldd	r18, Y+8	; 0x08
    121e:	39 85       	ldd	r19, Y+9	; 0x09
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	71 f1       	breq	.+92     	; 0x1282 <MDIO_voidSetPinValue+0xc0>
    1226:	88 85       	ldd	r24, Y+8	; 0x08
    1228:	99 85       	ldd	r25, Y+9	; 0x09
    122a:	83 30       	cpi	r24, 0x03	; 3
    122c:	91 05       	cpc	r25, r1
    122e:	e9 f1       	breq	.+122    	; 0x12aa <MDIO_voidSetPinValue+0xe8>
    1230:	3a c1       	rjmp	.+628    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
			{
				case PORTA: SET_BIT(PORTA_Register,copy_uint8PIN); break;
    1232:	ab e3       	ldi	r26, 0x3B	; 59
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	eb e3       	ldi	r30, 0x3B	; 59
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <MDIO_voidSetPinValue+0x8e>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <MDIO_voidSetPinValue+0x8a>
    1254:	84 2b       	or	r24, r20
    1256:	8c 93       	st	X, r24
    1258:	26 c1       	rjmp	.+588    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
				case PORTB: SET_BIT(PORTB_Register,copy_uint8PIN); break;
    125a:	a8 e3       	ldi	r26, 0x38	; 56
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e8 e3       	ldi	r30, 0x38	; 56
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <MDIO_voidSetPinValue+0xb6>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <MDIO_voidSetPinValue+0xb2>
    127c:	84 2b       	or	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	12 c1       	rjmp	.+548    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
				case PORTC: SET_BIT(PORTC_Register,copy_uint8PIN); break;
    1282:	a5 e3       	ldi	r26, 0x35	; 53
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e5 e3       	ldi	r30, 0x35	; 53
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <MDIO_voidSetPinValue+0xde>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <MDIO_voidSetPinValue+0xda>
    12a4:	84 2b       	or	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	fe c0       	rjmp	.+508    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
				case PORTD: SET_BIT(PORTD_Register,copy_uint8PIN); break;
    12aa:	a2 e3       	ldi	r26, 0x32	; 50
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e2 e3       	ldi	r30, 0x32	; 50
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <MDIO_voidSetPinValue+0x106>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <MDIO_voidSetPinValue+0x102>
    12cc:	84 2b       	or	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	ea c0       	rjmp	.+468    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
			}
		
		}
		
		else if (copy_uint8Value == LOW)
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	88 23       	and	r24, r24
    12d6:	09 f0       	breq	.+2      	; 0x12da <MDIO_voidSetPinValue+0x118>
    12d8:	74 c0       	rjmp	.+232    	; 0x13c2 <MDIO_voidSetPinValue+0x200>
		{
			/* Check on the Required PORT Number */
			switch (copy_uint8PORT)
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	3f 83       	std	Y+7, r19	; 0x07
    12e2:	2e 83       	std	Y+6, r18	; 0x06
    12e4:	8e 81       	ldd	r24, Y+6	; 0x06
    12e6:	9f 81       	ldd	r25, Y+7	; 0x07
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	91 05       	cpc	r25, r1
    12ec:	59 f1       	breq	.+86     	; 0x1344 <MDIO_voidSetPinValue+0x182>
    12ee:	2e 81       	ldd	r18, Y+6	; 0x06
    12f0:	3f 81       	ldd	r19, Y+7	; 0x07
    12f2:	22 30       	cpi	r18, 0x02	; 2
    12f4:	31 05       	cpc	r19, r1
    12f6:	2c f4       	brge	.+10     	; 0x1302 <MDIO_voidSetPinValue+0x140>
    12f8:	8e 81       	ldd	r24, Y+6	; 0x06
    12fa:	9f 81       	ldd	r25, Y+7	; 0x07
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	69 f0       	breq	.+26     	; 0x131a <MDIO_voidSetPinValue+0x158>
    1300:	d2 c0       	rjmp	.+420    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
    1302:	2e 81       	ldd	r18, Y+6	; 0x06
    1304:	3f 81       	ldd	r19, Y+7	; 0x07
    1306:	22 30       	cpi	r18, 0x02	; 2
    1308:	31 05       	cpc	r19, r1
    130a:	89 f1       	breq	.+98     	; 0x136e <MDIO_voidSetPinValue+0x1ac>
    130c:	8e 81       	ldd	r24, Y+6	; 0x06
    130e:	9f 81       	ldd	r25, Y+7	; 0x07
    1310:	83 30       	cpi	r24, 0x03	; 3
    1312:	91 05       	cpc	r25, r1
    1314:	09 f4       	brne	.+2      	; 0x1318 <MDIO_voidSetPinValue+0x156>
    1316:	40 c0       	rjmp	.+128    	; 0x1398 <MDIO_voidSetPinValue+0x1d6>
    1318:	c6 c0       	rjmp	.+396    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
			{
				case PORTA: CLR_BIT(PORTA_Register,copy_uint8PIN); break;
    131a:	ab e3       	ldi	r26, 0x3B	; 59
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	eb e3       	ldi	r30, 0x3B	; 59
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <MDIO_voidSetPinValue+0x176>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <MDIO_voidSetPinValue+0x172>
    133c:	80 95       	com	r24
    133e:	84 23       	and	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	b1 c0       	rjmp	.+354    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
				case PORTB: CLR_BIT(PORTB_Register,copy_uint8PIN); break;
    1344:	a8 e3       	ldi	r26, 0x38	; 56
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e8 e3       	ldi	r30, 0x38	; 56
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <MDIO_voidSetPinValue+0x1a0>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <MDIO_voidSetPinValue+0x19c>
    1366:	80 95       	com	r24
    1368:	84 23       	and	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	9c c0       	rjmp	.+312    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
				case PORTC: CLR_BIT(PORTC_Register,copy_uint8PIN); break;
    136e:	a5 e3       	ldi	r26, 0x35	; 53
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e5 e3       	ldi	r30, 0x35	; 53
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 2e       	mov	r0, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <MDIO_voidSetPinValue+0x1ca>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <MDIO_voidSetPinValue+0x1c6>
    1390:	80 95       	com	r24
    1392:	84 23       	and	r24, r20
    1394:	8c 93       	st	X, r24
    1396:	87 c0       	rjmp	.+270    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
				case PORTD: CLR_BIT(PORTD_Register,copy_uint8PIN); break;
    1398:	a2 e3       	ldi	r26, 0x32	; 50
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e2 e3       	ldi	r30, 0x32	; 50
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <MDIO_voidSetPinValue+0x1f4>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <MDIO_voidSetPinValue+0x1f0>
    13ba:	80 95       	com	r24
    13bc:	84 23       	and	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	72 c0       	rjmp	.+228    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
			}
		}

		else if (copy_uint8Value == TOGGLE)
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	82 30       	cpi	r24, 0x02	; 2
    13c6:	09 f0       	breq	.+2      	; 0x13ca <MDIO_voidSetPinValue+0x208>
    13c8:	6e c0       	rjmp	.+220    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
		{
			/* Check on the Required PORT Number */
			switch (copy_uint8PORT)
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	3d 83       	std	Y+5, r19	; 0x05
    13d2:	2c 83       	std	Y+4, r18	; 0x04
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	9d 81       	ldd	r25, Y+5	; 0x05
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	91 05       	cpc	r25, r1
    13dc:	49 f1       	breq	.+82     	; 0x1430 <MDIO_voidSetPinValue+0x26e>
    13de:	2c 81       	ldd	r18, Y+4	; 0x04
    13e0:	3d 81       	ldd	r19, Y+5	; 0x05
    13e2:	22 30       	cpi	r18, 0x02	; 2
    13e4:	31 05       	cpc	r19, r1
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <MDIO_voidSetPinValue+0x230>
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	9d 81       	ldd	r25, Y+5	; 0x05
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	61 f0       	breq	.+24     	; 0x1408 <MDIO_voidSetPinValue+0x246>
    13f0:	5a c0       	rjmp	.+180    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
    13f2:	2c 81       	ldd	r18, Y+4	; 0x04
    13f4:	3d 81       	ldd	r19, Y+5	; 0x05
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	71 f1       	breq	.+92     	; 0x1458 <MDIO_voidSetPinValue+0x296>
    13fc:	8c 81       	ldd	r24, Y+4	; 0x04
    13fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	91 05       	cpc	r25, r1
    1404:	e9 f1       	breq	.+122    	; 0x1480 <MDIO_voidSetPinValue+0x2be>
    1406:	4f c0       	rjmp	.+158    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
			{
				case PORTA: TOG_BIT(PORTA_Register,copy_uint8PIN); break;
    1408:	ab e3       	ldi	r26, 0x3B	; 59
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	eb e3       	ldi	r30, 0x3B	; 59
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <MDIO_voidSetPinValue+0x264>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <MDIO_voidSetPinValue+0x260>
    142a:	84 27       	eor	r24, r20
    142c:	8c 93       	st	X, r24
    142e:	3b c0       	rjmp	.+118    	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
				case PORTB: TOG_BIT(PORTB_Register,copy_uint8PIN); break;
    1430:	a8 e3       	ldi	r26, 0x38	; 56
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e8 e3       	ldi	r30, 0x38	; 56
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 2e       	mov	r0, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <MDIO_voidSetPinValue+0x28c>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <MDIO_voidSetPinValue+0x288>
    1452:	84 27       	eor	r24, r20
    1454:	8c 93       	st	X, r24
    1456:	27 c0       	rjmp	.+78     	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
				case PORTC: TOG_BIT(PORTC_Register,copy_uint8PIN); break;
    1458:	a5 e3       	ldi	r26, 0x35	; 53
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e5 e3       	ldi	r30, 0x35	; 53
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <MDIO_voidSetPinValue+0x2b4>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <MDIO_voidSetPinValue+0x2b0>
    147a:	84 27       	eor	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	13 c0       	rjmp	.+38     	; 0x14a6 <MDIO_voidSetPinValue+0x2e4>
				case PORTD: TOG_BIT(PORTD_Register,copy_uint8PIN); break;
    1480:	a2 e3       	ldi	r26, 0x32	; 50
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e2 e3       	ldi	r30, 0x32	; 50
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <MDIO_voidSetPinValue+0x2dc>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <MDIO_voidSetPinValue+0x2d8>
    14a2:	84 27       	eor	r24, r20
    14a4:	8c 93       	st	X, r24
	
	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
    14a6:	29 96       	adiw	r28, 0x09	; 9
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <MDIO_uint8GetPinValue>:
 *
 * OUTPUT      : the value of pin
 *
 **************************************************************************************************/
uint8 MDIO_uint8GetPinValue(uint8 copy_uint8PORT, uint8 copy_uint8PIN)
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	00 d0       	rcall	.+0      	; 0x14be <MDIO_uint8GetPinValue+0x6>
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <MDIO_uint8GetPinValue+0x8>
    14c0:	0f 92       	push	r0
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	8a 83       	std	Y+2, r24	; 0x02
    14c8:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	uint8 Local_uint8Result;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((copy_uint8PORT <= PORTD) && (copy_uint8PIN <= PIN7))
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	84 30       	cpi	r24, 0x04	; 4
    14ce:	08 f0       	brcs	.+2      	; 0x14d2 <MDIO_uint8GetPinValue+0x1a>
    14d0:	6c c0       	rjmp	.+216    	; 0x15aa <MDIO_uint8GetPinValue+0xf2>
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	88 30       	cpi	r24, 0x08	; 8
    14d6:	08 f0       	brcs	.+2      	; 0x14da <MDIO_uint8GetPinValue+0x22>
    14d8:	68 c0       	rjmp	.+208    	; 0x15aa <MDIO_uint8GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (copy_uint8PORT)
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	3d 83       	std	Y+5, r19	; 0x05
    14e2:	2c 83       	std	Y+4, r18	; 0x04
    14e4:	4c 81       	ldd	r20, Y+4	; 0x04
    14e6:	5d 81       	ldd	r21, Y+5	; 0x05
    14e8:	41 30       	cpi	r20, 0x01	; 1
    14ea:	51 05       	cpc	r21, r1
    14ec:	41 f1       	breq	.+80     	; 0x153e <MDIO_uint8GetPinValue+0x86>
    14ee:	8c 81       	ldd	r24, Y+4	; 0x04
    14f0:	9d 81       	ldd	r25, Y+5	; 0x05
    14f2:	82 30       	cpi	r24, 0x02	; 2
    14f4:	91 05       	cpc	r25, r1
    14f6:	34 f4       	brge	.+12     	; 0x1504 <MDIO_uint8GetPinValue+0x4c>
    14f8:	2c 81       	ldd	r18, Y+4	; 0x04
    14fa:	3d 81       	ldd	r19, Y+5	; 0x05
    14fc:	21 15       	cp	r18, r1
    14fe:	31 05       	cpc	r19, r1
    1500:	61 f0       	breq	.+24     	; 0x151a <MDIO_uint8GetPinValue+0x62>
    1502:	55 c0       	rjmp	.+170    	; 0x15ae <MDIO_uint8GetPinValue+0xf6>
    1504:	4c 81       	ldd	r20, Y+4	; 0x04
    1506:	5d 81       	ldd	r21, Y+5	; 0x05
    1508:	42 30       	cpi	r20, 0x02	; 2
    150a:	51 05       	cpc	r21, r1
    150c:	51 f1       	breq	.+84     	; 0x1562 <MDIO_uint8GetPinValue+0xaa>
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	9d 81       	ldd	r25, Y+5	; 0x05
    1512:	83 30       	cpi	r24, 0x03	; 3
    1514:	91 05       	cpc	r25, r1
    1516:	b9 f1       	breq	.+110    	; 0x1586 <MDIO_uint8GetPinValue+0xce>
    1518:	4a c0       	rjmp	.+148    	; 0x15ae <MDIO_uint8GetPinValue+0xf6>
		{
			case PORTA: Local_uint8Result= GET_BIT(PINA_Register,copy_uint8PIN); break;
    151a:	e9 e3       	ldi	r30, 0x39	; 57
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	88 2f       	mov	r24, r24
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	a9 01       	movw	r20, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <MDIO_uint8GetPinValue+0x7a>
    152e:	55 95       	asr	r21
    1530:	47 95       	ror	r20
    1532:	8a 95       	dec	r24
    1534:	e2 f7       	brpl	.-8      	; 0x152e <MDIO_uint8GetPinValue+0x76>
    1536:	ca 01       	movw	r24, r20
    1538:	81 70       	andi	r24, 0x01	; 1
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	38 c0       	rjmp	.+112    	; 0x15ae <MDIO_uint8GetPinValue+0xf6>
			case PORTB: Local_uint8Result= GET_BIT(PINB_Register,copy_uint8PIN); break;
    153e:	e6 e3       	ldi	r30, 0x36	; 54
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a9 01       	movw	r20, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <MDIO_uint8GetPinValue+0x9e>
    1552:	55 95       	asr	r21
    1554:	47 95       	ror	r20
    1556:	8a 95       	dec	r24
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <MDIO_uint8GetPinValue+0x9a>
    155a:	ca 01       	movw	r24, r20
    155c:	81 70       	andi	r24, 0x01	; 1
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	26 c0       	rjmp	.+76     	; 0x15ae <MDIO_uint8GetPinValue+0xf6>
			case PORTC: Local_uint8Result= GET_BIT(PINC_Register,copy_uint8PIN); break;
    1562:	e3 e3       	ldi	r30, 0x33	; 51
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	a9 01       	movw	r20, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <MDIO_uint8GetPinValue+0xc2>
    1576:	55 95       	asr	r21
    1578:	47 95       	ror	r20
    157a:	8a 95       	dec	r24
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <MDIO_uint8GetPinValue+0xbe>
    157e:	ca 01       	movw	r24, r20
    1580:	81 70       	andi	r24, 0x01	; 1
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	14 c0       	rjmp	.+40     	; 0x15ae <MDIO_uint8GetPinValue+0xf6>
			case PORTD: Local_uint8Result= GET_BIT(PIND_Register,copy_uint8PIN); break;
    1586:	e0 e3       	ldi	r30, 0x30	; 48
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	88 2f       	mov	r24, r24
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	a9 01       	movw	r20, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <MDIO_uint8GetPinValue+0xe6>
    159a:	55 95       	asr	r21
    159c:	47 95       	ror	r20
    159e:	8a 95       	dec	r24
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <MDIO_uint8GetPinValue+0xe2>
    15a2:	ca 01       	movw	r24, r20
    15a4:	81 70       	andi	r24, 0x01	; 1
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <MDIO_uint8GetPinValue+0xf6>
	}
	
	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		Local_uint8Result = 0xFF;
    15aa:	8f ef       	ldi	r24, 0xFF	; 255
    15ac:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_uint8Result;
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <MDIO_voidSetPortDirection>:
 *
 * OUTPUT      : None (void)
 *
 **************************************************************************************************/
void MDIO_voidSetPortDirection (uint8 copy_uint8PortId, uint8 copy_uint8MODE)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <MDIO_voidSetPortDirection+0x6>
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <MDIO_voidSetPortDirection+0x8>
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (copy_uint8PortId)
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	3c 83       	std	Y+4, r19	; 0x04
    15d8:	2b 83       	std	Y+3, r18	; 0x03
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	9c 81       	ldd	r25, Y+4	; 0x04
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	91 05       	cpc	r25, r1
    15e2:	d1 f0       	breq	.+52     	; 0x1618 <MDIO_voidSetPortDirection+0x58>
    15e4:	2b 81       	ldd	r18, Y+3	; 0x03
    15e6:	3c 81       	ldd	r19, Y+4	; 0x04
    15e8:	22 30       	cpi	r18, 0x02	; 2
    15ea:	31 05       	cpc	r19, r1
    15ec:	2c f4       	brge	.+10     	; 0x15f8 <MDIO_voidSetPortDirection+0x38>
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	61 f0       	breq	.+24     	; 0x160e <MDIO_voidSetPortDirection+0x4e>
    15f6:	1e c0       	rjmp	.+60     	; 0x1634 <MDIO_voidSetPortDirection+0x74>
    15f8:	2b 81       	ldd	r18, Y+3	; 0x03
    15fa:	3c 81       	ldd	r19, Y+4	; 0x04
    15fc:	22 30       	cpi	r18, 0x02	; 2
    15fe:	31 05       	cpc	r19, r1
    1600:	81 f0       	breq	.+32     	; 0x1622 <MDIO_voidSetPortDirection+0x62>
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9c 81       	ldd	r25, Y+4	; 0x04
    1606:	83 30       	cpi	r24, 0x03	; 3
    1608:	91 05       	cpc	r25, r1
    160a:	81 f0       	breq	.+32     	; 0x162c <MDIO_voidSetPortDirection+0x6c>
    160c:	13 c0       	rjmp	.+38     	; 0x1634 <MDIO_voidSetPortDirection+0x74>
	{
		case     PORTA: DDRA_Register = copy_uint8MODE; break;
    160e:	ea e3       	ldi	r30, 0x3A	; 58
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	80 83       	st	Z, r24
    1616:	0e c0       	rjmp	.+28     	; 0x1634 <MDIO_voidSetPortDirection+0x74>
		case     PORTB: DDRB_Register = copy_uint8MODE; break;
    1618:	e7 e3       	ldi	r30, 0x37	; 55
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	80 83       	st	Z, r24
    1620:	09 c0       	rjmp	.+18     	; 0x1634 <MDIO_voidSetPortDirection+0x74>
		case     PORTC: DDRC_Register = copy_uint8MODE; break;
    1622:	e4 e3       	ldi	r30, 0x34	; 52
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	80 83       	st	Z, r24
    162a:	04 c0       	rjmp	.+8      	; 0x1634 <MDIO_voidSetPortDirection+0x74>
		case     PORTD: DDRD_Register = copy_uint8MODE; break;
    162c:	e1 e3       	ldi	r30, 0x31	; 49
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <MDIO_voidSetPortValue>:
 *
 * OUTPUT      : None (void)
 *
 **************************************************************************************************/
void MDIO_voidSetPortValue (uint8 copy_uint8PortId, uint8 copy_uint8PortVal)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	00 d0       	rcall	.+0      	; 0x1648 <MDIO_voidSetPortValue+0x6>
    1648:	00 d0       	rcall	.+0      	; 0x164a <MDIO_voidSetPortValue+0x8>
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (copy_uint8PortId)
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	3c 83       	std	Y+4, r19	; 0x04
    165a:	2b 83       	std	Y+3, r18	; 0x03
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	91 05       	cpc	r25, r1
    1664:	d1 f0       	breq	.+52     	; 0x169a <MDIO_voidSetPortValue+0x58>
    1666:	2b 81       	ldd	r18, Y+3	; 0x03
    1668:	3c 81       	ldd	r19, Y+4	; 0x04
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	2c f4       	brge	.+10     	; 0x167a <MDIO_voidSetPortValue+0x38>
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	61 f0       	breq	.+24     	; 0x1690 <MDIO_voidSetPortValue+0x4e>
    1678:	1e c0       	rjmp	.+60     	; 0x16b6 <MDIO_voidSetPortValue+0x74>
    167a:	2b 81       	ldd	r18, Y+3	; 0x03
    167c:	3c 81       	ldd	r19, Y+4	; 0x04
    167e:	22 30       	cpi	r18, 0x02	; 2
    1680:	31 05       	cpc	r19, r1
    1682:	81 f0       	breq	.+32     	; 0x16a4 <MDIO_voidSetPortValue+0x62>
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	83 30       	cpi	r24, 0x03	; 3
    168a:	91 05       	cpc	r25, r1
    168c:	81 f0       	breq	.+32     	; 0x16ae <MDIO_voidSetPortValue+0x6c>
    168e:	13 c0       	rjmp	.+38     	; 0x16b6 <MDIO_voidSetPortValue+0x74>
	{
		case     PORTA: PORTA_Register = copy_uint8PortVal; break;
    1690:	eb e3       	ldi	r30, 0x3B	; 59
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	80 83       	st	Z, r24
    1698:	0e c0       	rjmp	.+28     	; 0x16b6 <MDIO_voidSetPortValue+0x74>
		case     PORTB: PORTB_Register = copy_uint8PortVal; break;
    169a:	e8 e3       	ldi	r30, 0x38	; 56
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	80 83       	st	Z, r24
    16a2:	09 c0       	rjmp	.+18     	; 0x16b6 <MDIO_voidSetPortValue+0x74>
		case     PORTC: PORTC_Register = copy_uint8PortVal; break;
    16a4:	e5 e3       	ldi	r30, 0x35	; 53
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	80 83       	st	Z, r24
    16ac:	04 c0       	rjmp	.+8      	; 0x16b6 <MDIO_voidSetPortValue+0x74>
		case     PORTD: PORTD_Register = copy_uint8PortVal; break;
    16ae:	e2 e3       	ldi	r30, 0x32	; 50
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
    16cc:	e7 e2       	ldi	r30, 0x27	; 39
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	10 82       	st	Z, r1
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
    16d2:	e6 e2       	ldi	r30, 0x26	; 38
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	83 e8       	ldi	r24, 0x83	; 131
    16d8:	80 83       	st	Z, r24
}
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	0f 92       	push	r0
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
    16ea:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	87 70       	andi	r24, 0x07	; 7
    16f0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    16f2:	a7 e2       	ldi	r26, 0x27	; 39
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e7 e2       	ldi	r30, 0x27	; 39
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	80 7e       	andi	r24, 0xE0	; 224
    16fe:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
    1700:	a7 e2       	ldi	r26, 0x27	; 39
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e7 e2       	ldi	r30, 0x27	; 39
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	90 81       	ld	r25, Z
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	89 2b       	or	r24, r25
    170e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
    1710:	a6 e2       	ldi	r26, 0x26	; 38
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e6 e2       	ldi	r30, 0x26	; 38
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	80 64       	ori	r24, 0x40	; 64
    171c:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
    171e:	e6 e2       	ldi	r30, 0x26	; 38
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	80 71       	andi	r24, 0x10	; 16
    172a:	90 70       	andi	r25, 0x00	; 0
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	b9 f3       	breq	.-18     	; 0x171e <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
    1730:	a6 e2       	ldi	r26, 0x26	; 38
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e6 e2       	ldi	r30, 0x26	; 38
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	80 61       	ori	r24, 0x10	; 16
    173c:	8c 93       	st	X, r24
	return ADC; /* return the data register */
    173e:	e4 e2       	ldi	r30, 0x24	; 36
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	91 81       	ldd	r25, Z+1	; 0x01
}
    1746:	0f 90       	pop	r0
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	00 d0       	rcall	.+0      	; 0x1754 <KeyPad_getPressedKey+0x6>
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1758:	1a 82       	std	Y+2, r1	; 0x02
    175a:	4d c0       	rjmp	.+154    	; 0x17f6 <KeyPad_getPressedKey+0xa8>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    175c:	e7 e3       	ldi	r30, 0x37	; 55
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	80 e1       	ldi	r24, 0x10	; 16
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <KeyPad_getPressedKey+0x22>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	2a 95       	dec	r18
    1772:	e2 f7       	brpl	.-8      	; 0x176c <KeyPad_getPressedKey+0x1e>
    1774:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    1776:	e8 e3       	ldi	r30, 0x38	; 56
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	80 e1       	ldi	r24, 0x10	; 16
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 2e       	mov	r0, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <KeyPad_getPressedKey+0x3e>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <KeyPad_getPressedKey+0x3a>
    1790:	80 95       	com	r24
    1792:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    1794:	19 82       	std	Y+1, r1	; 0x01
    1796:	29 c0       	rjmp	.+82     	; 0x17ea <KeyPad_getPressedKey+0x9c>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1798:	e6 e3       	ldi	r30, 0x36	; 54
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a9 01       	movw	r20, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <KeyPad_getPressedKey+0x62>
    17ac:	55 95       	asr	r21
    17ae:	47 95       	ror	r20
    17b0:	8a 95       	dec	r24
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <KeyPad_getPressedKey+0x5e>
    17b4:	ca 01       	movw	r24, r20
    17b6:	81 70       	andi	r24, 0x01	; 1
    17b8:	90 70       	andi	r25, 0x00	; 0
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	99 f4       	brne	.+38     	; 0x17e4 <KeyPad_getPressedKey+0x96>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	c9 01       	movw	r24, r18
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	82 0f       	add	r24, r18
    17cc:	93 1f       	adc	r25, r19
    17ce:	98 2f       	mov	r25, r24
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	89 0f       	add	r24, r25
    17d4:	8f 5f       	subi	r24, 0xFF	; 255
    17d6:	0e 94 00 0c 	call	0x1800	; 0x1800 <KeyPad_4x3_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	8f 5f       	subi	r24, 0xFF	; 255
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	84 30       	cpi	r24, 0x04	; 4
    17ee:	a0 f2       	brcs	.-88     	; 0x1798 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	8f 5f       	subi	r24, 0xFF	; 255
    17f4:	8a 83       	std	Y+2, r24	; 0x02
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	83 30       	cpi	r24, 0x03	; 3
    17fa:	08 f4       	brcc	.+2      	; 0x17fe <KeyPad_getPressedKey+0xb0>
    17fc:	af cf       	rjmp	.-162    	; 0x175c <KeyPad_getPressedKey+0xe>
    17fe:	ac cf       	rjmp	.-168    	; 0x1758 <KeyPad_getPressedKey+0xa>

00001800 <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3) 

static uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	00 d0       	rcall	.+0      	; 0x1806 <KeyPad_4x3_adjustKeyNumber+0x6>
    1806:	00 d0       	rcall	.+0      	; 0x1808 <KeyPad_4x3_adjustKeyNumber+0x8>
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	3c 83       	std	Y+4, r19	; 0x04
    1816:	2b 83       	std	Y+3, r18	; 0x03
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	8a 30       	cpi	r24, 0x0A	; 10
    181e:	91 05       	cpc	r25, r1
    1820:	81 f0       	breq	.+32     	; 0x1842 <KeyPad_4x3_adjustKeyNumber+0x42>
    1822:	2b 81       	ldd	r18, Y+3	; 0x03
    1824:	3c 81       	ldd	r19, Y+4	; 0x04
    1826:	2a 30       	cpi	r18, 0x0A	; 10
    1828:	31 05       	cpc	r19, r1
    182a:	9c f0       	brlt	.+38     	; 0x1852 <KeyPad_4x3_adjustKeyNumber+0x52>
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	8b 30       	cpi	r24, 0x0B	; 11
    1832:	91 05       	cpc	r25, r1
    1834:	49 f0       	breq	.+18     	; 0x1848 <KeyPad_4x3_adjustKeyNumber+0x48>
    1836:	2b 81       	ldd	r18, Y+3	; 0x03
    1838:	3c 81       	ldd	r19, Y+4	; 0x04
    183a:	2c 30       	cpi	r18, 0x0C	; 12
    183c:	31 05       	cpc	r19, r1
    183e:	31 f0       	breq	.+12     	; 0x184c <KeyPad_4x3_adjustKeyNumber+0x4c>
    1840:	08 c0       	rjmp	.+16     	; 0x1852 <KeyPad_4x3_adjustKeyNumber+0x52>
	{
		case 10: return '*'; // ASCII Code of *
    1842:	3a e2       	ldi	r19, 0x2A	; 42
    1844:	3a 83       	std	Y+2, r19	; 0x02
    1846:	07 c0       	rjmp	.+14     	; 0x1856 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 11: return 0;
    1848:	1a 82       	std	Y+2, r1	; 0x02
    184a:	05 c0       	rjmp	.+10     	; 0x1856 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;		
		case 12: return '#'; // ASCII Code of #
    184c:	83 e2       	ldi	r24, 0x23	; 35
    184e:	8a 83       	std	Y+2, r24	; 0x02
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		default: return button_number;								 						
    1852:	99 81       	ldd	r25, Y+1	; 0x01
    1854:	9a 83       	std	Y+2, r25	; 0x02
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <LCD_init>:
#include"lcd.h"

void LCD_init(){
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR|=(1<<RS) | (1<<RW ) | (1<<E);
    186e:	a1 e3       	ldi	r26, 0x31	; 49
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e1 e3       	ldi	r30, 0x31	; 49
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	87 60       	ori	r24, 0x07	; 7
    187a:	8c 93       	st	X, r24
#if(LCD_BIT_MODE==8)
	LCD_DATA_PORT_DIR=0xFF;
	LCD_sendCommand(TWO_LINES_LCD_EIGHT_BIT_MODE);
#elif(LCD_BIT_MODE==4)
#ifdef UPPER_PORT_PIN
	LCD_DATA_PORT_DIR|=0xF0;
    187c:	a4 e3       	ldi	r26, 0x34	; 52
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e4 e3       	ldi	r30, 0x34	; 52
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	80 6f       	ori	r24, 0xF0	; 240
    1888:	8c 93       	st	X, r24
#else
	LCD_DATA_PORT_DIR|=0x0F;
#endif
	LCD_sendCommand(RETURN_HOME);/*LAZM tktb al2mr da alawl som tktb TWO_LINE b3doh*/
    188a:	82 e0       	ldi	r24, 0x02	; 2
    188c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINES_LCD_FOUR_BIT_MODE);
    1890:	88 e2       	ldi	r24, 0x28	; 40
    1892:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <LCD_sendCommand>
#endif
	LCD_sendCommand(CURSOR_OFF);
    1896:	8c e0       	ldi	r24, 0x0C	; 12
    1898:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN);
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <LCD_sendCommand>
}
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command){
    18a8:	0f 93       	push	r16
    18aa:	1f 93       	push	r17
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	c3 56       	subi	r28, 0x63	; 99
    18b6:	d0 40       	sbci	r29, 0x00	; 0
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	fe 01       	movw	r30, r28
    18c4:	ed 59       	subi	r30, 0x9D	; 157
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS);
    18ca:	a2 e3       	ldi	r26, 0x32	; 50
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e2 e3       	ldi	r30, 0x32	; 50
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	8e 7f       	andi	r24, 0xFE	; 254
    18d6:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
    18d8:	a2 e3       	ldi	r26, 0x32	; 50
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e2 e3       	ldi	r30, 0x32	; 50
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	8d 7f       	andi	r24, 0xFD	; 253
    18e4:	8c 93       	st	X, r24
    18e6:	fe 01       	movw	r30, r28
    18e8:	e1 5a       	subi	r30, 0xA1	; 161
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a0 e8       	ldi	r26, 0x80	; 128
    18f2:	bf e3       	ldi	r27, 0x3F	; 63
    18f4:	80 83       	st	Z, r24
    18f6:	91 83       	std	Z+1, r25	; 0x01
    18f8:	a2 83       	std	Z+2, r26	; 0x02
    18fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fc:	8e 01       	movw	r16, r28
    18fe:	05 5a       	subi	r16, 0xA5	; 165
    1900:	1f 4f       	sbci	r17, 0xFF	; 255
    1902:	fe 01       	movw	r30, r28
    1904:	e1 5a       	subi	r30, 0xA1	; 161
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	60 81       	ld	r22, Z
    190a:	71 81       	ldd	r23, Z+1	; 0x01
    190c:	82 81       	ldd	r24, Z+2	; 0x02
    190e:	93 81       	ldd	r25, Z+3	; 0x03
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4a e7       	ldi	r20, 0x7A	; 122
    1916:	53 e4       	ldi	r21, 0x43	; 67
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	f8 01       	movw	r30, r16
    1922:	80 83       	st	Z, r24
    1924:	91 83       	std	Z+1, r25	; 0x01
    1926:	a2 83       	std	Z+2, r26	; 0x02
    1928:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    192a:	fe 01       	movw	r30, r28
    192c:	e5 5a       	subi	r30, 0xA5	; 165
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	60 81       	ld	r22, Z
    1932:	71 81       	ldd	r23, Z+1	; 0x01
    1934:	82 81       	ldd	r24, Z+2	; 0x02
    1936:	93 81       	ldd	r25, Z+3	; 0x03
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e8       	ldi	r20, 0x80	; 128
    193e:	5f e3       	ldi	r21, 0x3F	; 63
    1940:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1944:	88 23       	and	r24, r24
    1946:	44 f4       	brge	.+16     	; 0x1958 <LCD_sendCommand+0xb0>
		__ticks = 1;
    1948:	fe 01       	movw	r30, r28
    194a:	e7 5a       	subi	r30, 0xA7	; 167
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	91 83       	std	Z+1, r25	; 0x01
    1954:	80 83       	st	Z, r24
    1956:	64 c0       	rjmp	.+200    	; 0x1a20 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1958:	fe 01       	movw	r30, r28
    195a:	e5 5a       	subi	r30, 0xA5	; 165
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	60 81       	ld	r22, Z
    1960:	71 81       	ldd	r23, Z+1	; 0x01
    1962:	82 81       	ldd	r24, Z+2	; 0x02
    1964:	93 81       	ldd	r25, Z+3	; 0x03
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	3f ef       	ldi	r19, 0xFF	; 255
    196a:	4f e7       	ldi	r20, 0x7F	; 127
    196c:	57 e4       	ldi	r21, 0x47	; 71
    196e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1972:	18 16       	cp	r1, r24
    1974:	0c f0       	brlt	.+2      	; 0x1978 <LCD_sendCommand+0xd0>
    1976:	43 c0       	rjmp	.+134    	; 0x19fe <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1978:	fe 01       	movw	r30, r28
    197a:	e1 5a       	subi	r30, 0xA1	; 161
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	60 81       	ld	r22, Z
    1980:	71 81       	ldd	r23, Z+1	; 0x01
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e2       	ldi	r20, 0x20	; 32
    198c:	51 e4       	ldi	r21, 0x41	; 65
    198e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	8e 01       	movw	r16, r28
    1998:	07 5a       	subi	r16, 0xA7	; 167
    199a:	1f 4f       	sbci	r17, 0xFF	; 255
    199c:	bc 01       	movw	r22, r24
    199e:	cd 01       	movw	r24, r26
    19a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	f8 01       	movw	r30, r16
    19aa:	91 83       	std	Z+1, r25	; 0x01
    19ac:	80 83       	st	Z, r24
    19ae:	1f c0       	rjmp	.+62     	; 0x19ee <LCD_sendCommand+0x146>
    19b0:	fe 01       	movw	r30, r28
    19b2:	e9 5a       	subi	r30, 0xA9	; 169
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	89 e1       	ldi	r24, 0x19	; 25
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19be:	fe 01       	movw	r30, r28
    19c0:	e9 5a       	subi	r30, 0xA9	; 169
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	80 81       	ld	r24, Z
    19c6:	91 81       	ldd	r25, Z+1	; 0x01
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <LCD_sendCommand+0x120>
    19cc:	fe 01       	movw	r30, r28
    19ce:	e9 5a       	subi	r30, 0xA9	; 169
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	91 83       	std	Z+1, r25	; 0x01
    19d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d6:	de 01       	movw	r26, r28
    19d8:	a7 5a       	subi	r26, 0xA7	; 167
    19da:	bf 4f       	sbci	r27, 0xFF	; 255
    19dc:	fe 01       	movw	r30, r28
    19de:	e7 5a       	subi	r30, 0xA7	; 167
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	80 81       	ld	r24, Z
    19e4:	91 81       	ldd	r25, Z+1	; 0x01
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	11 96       	adiw	r26, 0x01	; 1
    19ea:	9c 93       	st	X, r25
    19ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ee:	fe 01       	movw	r30, r28
    19f0:	e7 5a       	subi	r30, 0xA7	; 167
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	d1 f6       	brne	.-76     	; 0x19b0 <LCD_sendCommand+0x108>
    19fc:	27 c0       	rjmp	.+78     	; 0x1a4c <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fe:	8e 01       	movw	r16, r28
    1a00:	07 5a       	subi	r16, 0xA7	; 167
    1a02:	1f 4f       	sbci	r17, 0xFF	; 255
    1a04:	fe 01       	movw	r30, r28
    1a06:	e5 5a       	subi	r30, 0xA5	; 165
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	60 81       	ld	r22, Z
    1a0c:	71 81       	ldd	r23, Z+1	; 0x01
    1a0e:	82 81       	ldd	r24, Z+2	; 0x02
    1a10:	93 81       	ldd	r25, Z+3	; 0x03
    1a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	f8 01       	movw	r30, r16
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	80 83       	st	Z, r24
    1a20:	de 01       	movw	r26, r28
    1a22:	ab 5a       	subi	r26, 0xAB	; 171
    1a24:	bf 4f       	sbci	r27, 0xFF	; 255
    1a26:	fe 01       	movw	r30, r28
    1a28:	e7 5a       	subi	r30, 0xA7	; 167
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	80 81       	ld	r24, Z
    1a2e:	91 81       	ldd	r25, Z+1	; 0x01
    1a30:	8d 93       	st	X+, r24
    1a32:	9c 93       	st	X, r25
    1a34:	fe 01       	movw	r30, r28
    1a36:	eb 5a       	subi	r30, 0xAB	; 171
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	80 81       	ld	r24, Z
    1a3c:	91 81       	ldd	r25, Z+1	; 0x01
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LCD_sendCommand+0x196>
    1a42:	fe 01       	movw	r30, r28
    1a44:	eb 5a       	subi	r30, 0xAB	; 171
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	91 83       	std	Z+1, r25	; 0x01
    1a4a:	80 83       	st	Z, r24
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    1a4c:	a2 e3       	ldi	r26, 0x32	; 50
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e2 e3       	ldi	r30, 0x32	; 50
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	84 60       	ori	r24, 0x04	; 4
    1a58:	8c 93       	st	X, r24
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	ef 5a       	subi	r30, 0xAF	; 175
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a0 e8       	ldi	r26, 0x80	; 128
    1a66:	bf e3       	ldi	r27, 0x3F	; 63
    1a68:	80 83       	st	Z, r24
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	a2 83       	std	Z+2, r26	; 0x02
    1a6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a70:	8e 01       	movw	r16, r28
    1a72:	03 5b       	subi	r16, 0xB3	; 179
    1a74:	1f 4f       	sbci	r17, 0xFF	; 255
    1a76:	fe 01       	movw	r30, r28
    1a78:	ef 5a       	subi	r30, 0xAF	; 175
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	60 81       	ld	r22, Z
    1a7e:	71 81       	ldd	r23, Z+1	; 0x01
    1a80:	82 81       	ldd	r24, Z+2	; 0x02
    1a82:	93 81       	ldd	r25, Z+3	; 0x03
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a e7       	ldi	r20, 0x7A	; 122
    1a8a:	53 e4       	ldi	r21, 0x43	; 67
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	f8 01       	movw	r30, r16
    1a96:	80 83       	st	Z, r24
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	a2 83       	std	Z+2, r26	; 0x02
    1a9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	e3 5b       	subi	r30, 0xB3	; 179
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e8       	ldi	r20, 0x80	; 128
    1ab2:	5f e3       	ldi	r21, 0x3F	; 63
    1ab4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab8:	88 23       	and	r24, r24
    1aba:	44 f4       	brge	.+16     	; 0x1acc <LCD_sendCommand+0x224>
		__ticks = 1;
    1abc:	fe 01       	movw	r30, r28
    1abe:	e5 5b       	subi	r30, 0xB5	; 181
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	91 83       	std	Z+1, r25	; 0x01
    1ac8:	80 83       	st	Z, r24
    1aca:	64 c0       	rjmp	.+200    	; 0x1b94 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1acc:	fe 01       	movw	r30, r28
    1ace:	e3 5b       	subi	r30, 0xB3	; 179
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	60 81       	ld	r22, Z
    1ad4:	71 81       	ldd	r23, Z+1	; 0x01
    1ad6:	82 81       	ldd	r24, Z+2	; 0x02
    1ad8:	93 81       	ldd	r25, Z+3	; 0x03
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	3f ef       	ldi	r19, 0xFF	; 255
    1ade:	4f e7       	ldi	r20, 0x7F	; 127
    1ae0:	57 e4       	ldi	r21, 0x47	; 71
    1ae2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae6:	18 16       	cp	r1, r24
    1ae8:	0c f0       	brlt	.+2      	; 0x1aec <LCD_sendCommand+0x244>
    1aea:	43 c0       	rjmp	.+134    	; 0x1b72 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aec:	fe 01       	movw	r30, r28
    1aee:	ef 5a       	subi	r30, 0xAF	; 175
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	60 81       	ld	r22, Z
    1af4:	71 81       	ldd	r23, Z+1	; 0x01
    1af6:	82 81       	ldd	r24, Z+2	; 0x02
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e2       	ldi	r20, 0x20	; 32
    1b00:	51 e4       	ldi	r21, 0x41	; 65
    1b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	8e 01       	movw	r16, r28
    1b0c:	05 5b       	subi	r16, 0xB5	; 181
    1b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	91 83       	std	Z+1, r25	; 0x01
    1b20:	80 83       	st	Z, r24
    1b22:	1f c0       	rjmp	.+62     	; 0x1b62 <LCD_sendCommand+0x2ba>
    1b24:	fe 01       	movw	r30, r28
    1b26:	e7 5b       	subi	r30, 0xB7	; 183
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	89 e1       	ldi	r24, 0x19	; 25
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	80 83       	st	Z, r24
    1b32:	fe 01       	movw	r30, r28
    1b34:	e7 5b       	subi	r30, 0xB7	; 183
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	80 81       	ld	r24, Z
    1b3a:	91 81       	ldd	r25, Z+1	; 0x01
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <LCD_sendCommand+0x294>
    1b40:	fe 01       	movw	r30, r28
    1b42:	e7 5b       	subi	r30, 0xB7	; 183
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	91 83       	std	Z+1, r25	; 0x01
    1b48:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4a:	de 01       	movw	r26, r28
    1b4c:	a5 5b       	subi	r26, 0xB5	; 181
    1b4e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b50:	fe 01       	movw	r30, r28
    1b52:	e5 5b       	subi	r30, 0xB5	; 181
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 81       	ld	r24, Z
    1b58:	91 81       	ldd	r25, Z+1	; 0x01
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	11 96       	adiw	r26, 0x01	; 1
    1b5e:	9c 93       	st	X, r25
    1b60:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b62:	fe 01       	movw	r30, r28
    1b64:	e5 5b       	subi	r30, 0xB5	; 181
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	80 81       	ld	r24, Z
    1b6a:	91 81       	ldd	r25, Z+1	; 0x01
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	d1 f6       	brne	.-76     	; 0x1b24 <LCD_sendCommand+0x27c>
    1b70:	27 c0       	rjmp	.+78     	; 0x1bc0 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b72:	8e 01       	movw	r16, r28
    1b74:	05 5b       	subi	r16, 0xB5	; 181
    1b76:	1f 4f       	sbci	r17, 0xFF	; 255
    1b78:	fe 01       	movw	r30, r28
    1b7a:	e3 5b       	subi	r30, 0xB3	; 179
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	60 81       	ld	r22, Z
    1b80:	71 81       	ldd	r23, Z+1	; 0x01
    1b82:	82 81       	ldd	r24, Z+2	; 0x02
    1b84:	93 81       	ldd	r25, Z+3	; 0x03
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	f8 01       	movw	r30, r16
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	80 83       	st	Z, r24
    1b94:	de 01       	movw	r26, r28
    1b96:	a9 5b       	subi	r26, 0xB9	; 185
    1b98:	bf 4f       	sbci	r27, 0xFF	; 255
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e5 5b       	subi	r30, 0xB5	; 181
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	8d 93       	st	X+, r24
    1ba6:	9c 93       	st	X, r25
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e9 5b       	subi	r30, 0xB9	; 185
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	80 81       	ld	r24, Z
    1bb0:	91 81       	ldd	r25, Z+1	; 0x01
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <LCD_sendCommand+0x30a>
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	e9 5b       	subi	r30, 0xB9	; 185
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	91 83       	std	Z+1, r25	; 0x01
    1bbe:	80 83       	st	Z, r24
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
	_delay_ms(1);
#elif(LCD_BIT_MODE==4)
#ifdef UPPER_PORT_PIN
	LCD_DATA_PORT=(LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    1bc0:	a5 e3       	ldi	r26, 0x35	; 53
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e5 e3       	ldi	r30, 0x35	; 53
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	98 2f       	mov	r25, r24
    1bcc:	9f 70       	andi	r25, 0x0F	; 15
    1bce:	fe 01       	movw	r30, r28
    1bd0:	ed 59       	subi	r30, 0x9D	; 157
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	80 81       	ld	r24, Z
    1bd6:	80 7f       	andi	r24, 0xF0	; 240
    1bd8:	89 2b       	or	r24, r25
    1bda:	8c 93       	st	X, r24
    1bdc:	fe 01       	movw	r30, r28
    1bde:	ed 5b       	subi	r30, 0xBD	; 189
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	a0 e8       	ldi	r26, 0x80	; 128
    1be8:	bf e3       	ldi	r27, 0x3F	; 63
    1bea:	80 83       	st	Z, r24
    1bec:	91 83       	std	Z+1, r25	; 0x01
    1bee:	a2 83       	std	Z+2, r26	; 0x02
    1bf0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf2:	8e 01       	movw	r16, r28
    1bf4:	01 5c       	subi	r16, 0xC1	; 193
    1bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	ed 5b       	subi	r30, 0xBD	; 189
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	60 81       	ld	r22, Z
    1c00:	71 81       	ldd	r23, Z+1	; 0x01
    1c02:	82 81       	ldd	r24, Z+2	; 0x02
    1c04:	93 81       	ldd	r25, Z+3	; 0x03
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	4a e7       	ldi	r20, 0x7A	; 122
    1c0c:	53 e4       	ldi	r21, 0x43	; 67
    1c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	f8 01       	movw	r30, r16
    1c18:	80 83       	st	Z, r24
    1c1a:	91 83       	std	Z+1, r25	; 0x01
    1c1c:	a2 83       	std	Z+2, r26	; 0x02
    1c1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c20:	fe 01       	movw	r30, r28
    1c22:	ff 96       	adiw	r30, 0x3f	; 63
    1c24:	60 81       	ld	r22, Z
    1c26:	71 81       	ldd	r23, Z+1	; 0x01
    1c28:	82 81       	ldd	r24, Z+2	; 0x02
    1c2a:	93 81       	ldd	r25, Z+3	; 0x03
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e8       	ldi	r20, 0x80	; 128
    1c32:	5f e3       	ldi	r21, 0x3F	; 63
    1c34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c38:	88 23       	and	r24, r24
    1c3a:	2c f4       	brge	.+10     	; 0x1c46 <LCD_sendCommand+0x39e>
		__ticks = 1;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9e af       	std	Y+62, r25	; 0x3e
    1c42:	8d af       	std	Y+61, r24	; 0x3d
    1c44:	46 c0       	rjmp	.+140    	; 0x1cd2 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1c46:	fe 01       	movw	r30, r28
    1c48:	ff 96       	adiw	r30, 0x3f	; 63
    1c4a:	60 81       	ld	r22, Z
    1c4c:	71 81       	ldd	r23, Z+1	; 0x01
    1c4e:	82 81       	ldd	r24, Z+2	; 0x02
    1c50:	93 81       	ldd	r25, Z+3	; 0x03
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	3f ef       	ldi	r19, 0xFF	; 255
    1c56:	4f e7       	ldi	r20, 0x7F	; 127
    1c58:	57 e4       	ldi	r21, 0x47	; 71
    1c5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c5e:	18 16       	cp	r1, r24
    1c60:	64 f5       	brge	.+88     	; 0x1cba <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c62:	fe 01       	movw	r30, r28
    1c64:	ed 5b       	subi	r30, 0xBD	; 189
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	60 81       	ld	r22, Z
    1c6a:	71 81       	ldd	r23, Z+1	; 0x01
    1c6c:	82 81       	ldd	r24, Z+2	; 0x02
    1c6e:	93 81       	ldd	r25, Z+3	; 0x03
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e2       	ldi	r20, 0x20	; 32
    1c76:	51 e4       	ldi	r21, 0x41	; 65
    1c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	bc 01       	movw	r22, r24
    1c82:	cd 01       	movw	r24, r26
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	9e af       	std	Y+62, r25	; 0x3e
    1c8e:	8d af       	std	Y+61, r24	; 0x3d
    1c90:	0f c0       	rjmp	.+30     	; 0x1cb0 <LCD_sendCommand+0x408>
    1c92:	89 e1       	ldi	r24, 0x19	; 25
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	9c af       	std	Y+60, r25	; 0x3c
    1c98:	8b af       	std	Y+59, r24	; 0x3b
    1c9a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c9c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <LCD_sendCommand+0x3f6>
    1ca2:	9c af       	std	Y+60, r25	; 0x3c
    1ca4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ca8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	9e af       	std	Y+62, r25	; 0x3e
    1cae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	69 f7       	brne	.-38     	; 0x1c92 <LCD_sendCommand+0x3ea>
    1cb8:	16 c0       	rjmp	.+44     	; 0x1ce6 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cba:	fe 01       	movw	r30, r28
    1cbc:	ff 96       	adiw	r30, 0x3f	; 63
    1cbe:	60 81       	ld	r22, Z
    1cc0:	71 81       	ldd	r23, Z+1	; 0x01
    1cc2:	82 81       	ldd	r24, Z+2	; 0x02
    1cc4:	93 81       	ldd	r25, Z+3	; 0x03
    1cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	9e af       	std	Y+62, r25	; 0x3e
    1cd0:	8d af       	std	Y+61, r24	; 0x3d
    1cd2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cd4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cd6:	9a af       	std	Y+58, r25	; 0x3a
    1cd8:	89 af       	std	Y+57, r24	; 0x39
    1cda:	89 ad       	ldd	r24, Y+57	; 0x39
    1cdc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <LCD_sendCommand+0x436>
    1ce2:	9a af       	std	Y+58, r25	; 0x3a
    1ce4:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT=(LCD_DATA_PORT & 0xF0) | ((command & 0xF0)>>4);
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    1ce6:	a2 e3       	ldi	r26, 0x32	; 50
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e2 e3       	ldi	r30, 0x32	; 50
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	8b 7f       	andi	r24, 0xFB	; 251
    1cf2:	8c 93       	st	X, r24
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	a0 e8       	ldi	r26, 0x80	; 128
    1cfa:	bf e3       	ldi	r27, 0x3F	; 63
    1cfc:	8d ab       	std	Y+53, r24	; 0x35
    1cfe:	9e ab       	std	Y+54, r25	; 0x36
    1d00:	af ab       	std	Y+55, r26	; 0x37
    1d02:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d04:	6d a9       	ldd	r22, Y+53	; 0x35
    1d06:	7e a9       	ldd	r23, Y+54	; 0x36
    1d08:	8f a9       	ldd	r24, Y+55	; 0x37
    1d0a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	4a e7       	ldi	r20, 0x7A	; 122
    1d12:	53 e4       	ldi	r21, 0x43	; 67
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	89 ab       	std	Y+49, r24	; 0x31
    1d1e:	9a ab       	std	Y+50, r25	; 0x32
    1d20:	ab ab       	std	Y+51, r26	; 0x33
    1d22:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d24:	69 a9       	ldd	r22, Y+49	; 0x31
    1d26:	7a a9       	ldd	r23, Y+50	; 0x32
    1d28:	8b a9       	ldd	r24, Y+51	; 0x33
    1d2a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e8       	ldi	r20, 0x80	; 128
    1d32:	5f e3       	ldi	r21, 0x3F	; 63
    1d34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d38:	88 23       	and	r24, r24
    1d3a:	2c f4       	brge	.+10     	; 0x1d46 <LCD_sendCommand+0x49e>
		__ticks = 1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	98 ab       	std	Y+48, r25	; 0x30
    1d42:	8f a7       	std	Y+47, r24	; 0x2f
    1d44:	3f c0       	rjmp	.+126    	; 0x1dc4 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1d46:	69 a9       	ldd	r22, Y+49	; 0x31
    1d48:	7a a9       	ldd	r23, Y+50	; 0x32
    1d4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	3f ef       	ldi	r19, 0xFF	; 255
    1d52:	4f e7       	ldi	r20, 0x7F	; 127
    1d54:	57 e4       	ldi	r21, 0x47	; 71
    1d56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d5a:	18 16       	cp	r1, r24
    1d5c:	4c f5       	brge	.+82     	; 0x1db0 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d60:	7e a9       	ldd	r23, Y+54	; 0x36
    1d62:	8f a9       	ldd	r24, Y+55	; 0x37
    1d64:	98 ad       	ldd	r25, Y+56	; 0x38
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e2       	ldi	r20, 0x20	; 32
    1d6c:	51 e4       	ldi	r21, 0x41	; 65
    1d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	bc 01       	movw	r22, r24
    1d78:	cd 01       	movw	r24, r26
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	98 ab       	std	Y+48, r25	; 0x30
    1d84:	8f a7       	std	Y+47, r24	; 0x2f
    1d86:	0f c0       	rjmp	.+30     	; 0x1da6 <LCD_sendCommand+0x4fe>
    1d88:	89 e1       	ldi	r24, 0x19	; 25
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9e a7       	std	Y+46, r25	; 0x2e
    1d8e:	8d a7       	std	Y+45, r24	; 0x2d
    1d90:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d92:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	f1 f7       	brne	.-4      	; 0x1d94 <LCD_sendCommand+0x4ec>
    1d98:	9e a7       	std	Y+46, r25	; 0x2e
    1d9a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	98 ab       	std	Y+48, r25	; 0x30
    1da4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1da8:	98 a9       	ldd	r25, Y+48	; 0x30
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	69 f7       	brne	.-38     	; 0x1d88 <LCD_sendCommand+0x4e0>
    1dae:	14 c0       	rjmp	.+40     	; 0x1dd8 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db0:	69 a9       	ldd	r22, Y+49	; 0x31
    1db2:	7a a9       	ldd	r23, Y+50	; 0x32
    1db4:	8b a9       	ldd	r24, Y+51	; 0x33
    1db6:	9c a9       	ldd	r25, Y+52	; 0x34
    1db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	98 ab       	std	Y+48, r25	; 0x30
    1dc2:	8f a7       	std	Y+47, r24	; 0x2f
    1dc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dc6:	98 a9       	ldd	r25, Y+48	; 0x30
    1dc8:	9c a7       	std	Y+44, r25	; 0x2c
    1dca:	8b a7       	std	Y+43, r24	; 0x2b
    1dcc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dce:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <LCD_sendCommand+0x528>
    1dd4:	9c a7       	std	Y+44, r25	; 0x2c
    1dd6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    1dd8:	a2 e3       	ldi	r26, 0x32	; 50
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e2 e3       	ldi	r30, 0x32	; 50
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	84 60       	ori	r24, 0x04	; 4
    1de4:	8c 93       	st	X, r24
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a0 e8       	ldi	r26, 0x80	; 128
    1dec:	bf e3       	ldi	r27, 0x3F	; 63
    1dee:	8f a3       	std	Y+39, r24	; 0x27
    1df0:	98 a7       	std	Y+40, r25	; 0x28
    1df2:	a9 a7       	std	Y+41, r26	; 0x29
    1df4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df6:	6f a1       	ldd	r22, Y+39	; 0x27
    1df8:	78 a5       	ldd	r23, Y+40	; 0x28
    1dfa:	89 a5       	ldd	r24, Y+41	; 0x29
    1dfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a e7       	ldi	r20, 0x7A	; 122
    1e04:	53 e4       	ldi	r21, 0x43	; 67
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	8b a3       	std	Y+35, r24	; 0x23
    1e10:	9c a3       	std	Y+36, r25	; 0x24
    1e12:	ad a3       	std	Y+37, r26	; 0x25
    1e14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e16:	6b a1       	ldd	r22, Y+35	; 0x23
    1e18:	7c a1       	ldd	r23, Y+36	; 0x24
    1e1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e8       	ldi	r20, 0x80	; 128
    1e24:	5f e3       	ldi	r21, 0x3F	; 63
    1e26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e2a:	88 23       	and	r24, r24
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <LCD_sendCommand+0x590>
		__ticks = 1;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	9a a3       	std	Y+34, r25	; 0x22
    1e34:	89 a3       	std	Y+33, r24	; 0x21
    1e36:	3f c0       	rjmp	.+126    	; 0x1eb6 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    1e38:	6b a1       	ldd	r22, Y+35	; 0x23
    1e3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	3f ef       	ldi	r19, 0xFF	; 255
    1e44:	4f e7       	ldi	r20, 0x7F	; 127
    1e46:	57 e4       	ldi	r21, 0x47	; 71
    1e48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e4c:	18 16       	cp	r1, r24
    1e4e:	4c f5       	brge	.+82     	; 0x1ea2 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e50:	6f a1       	ldd	r22, Y+39	; 0x27
    1e52:	78 a5       	ldd	r23, Y+40	; 0x28
    1e54:	89 a5       	ldd	r24, Y+41	; 0x29
    1e56:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e2       	ldi	r20, 0x20	; 32
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9a a3       	std	Y+34, r25	; 0x22
    1e76:	89 a3       	std	Y+33, r24	; 0x21
    1e78:	0f c0       	rjmp	.+30     	; 0x1e98 <LCD_sendCommand+0x5f0>
    1e7a:	89 e1       	ldi	r24, 0x19	; 25
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	98 a3       	std	Y+32, r25	; 0x20
    1e80:	8f 8f       	std	Y+31, r24	; 0x1f
    1e82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e84:	98 a1       	ldd	r25, Y+32	; 0x20
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <LCD_sendCommand+0x5de>
    1e8a:	98 a3       	std	Y+32, r25	; 0x20
    1e8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e90:	9a a1       	ldd	r25, Y+34	; 0x22
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	9a a3       	std	Y+34, r25	; 0x22
    1e96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e98:	89 a1       	ldd	r24, Y+33	; 0x21
    1e9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	69 f7       	brne	.-38     	; 0x1e7a <LCD_sendCommand+0x5d2>
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ea8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	9a a3       	std	Y+34, r25	; 0x22
    1eb4:	89 a3       	std	Y+33, r24	; 0x21
    1eb6:	89 a1       	ldd	r24, Y+33	; 0x21
    1eb8:	9a a1       	ldd	r25, Y+34	; 0x22
    1eba:	9e 8f       	std	Y+30, r25	; 0x1e
    1ebc:	8d 8f       	std	Y+29, r24	; 0x1d
    1ebe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ec0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <LCD_sendCommand+0x61a>
    1ec6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ec8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#ifdef UPPER_PORT_PIN
	LCD_DATA_PORT=(LCD_DATA_PORT & 0x0F) | ((command & 0x0F)<<4);
    1eca:	a5 e3       	ldi	r26, 0x35	; 53
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e5 e3       	ldi	r30, 0x35	; 53
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	2f 70       	andi	r18, 0x0F	; 15
    1ed8:	fe 01       	movw	r30, r28
    1eda:	ed 59       	subi	r30, 0x9D	; 157
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	80 81       	ld	r24, Z
    1ee0:	88 2f       	mov	r24, r24
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	82 95       	swap	r24
    1ee6:	92 95       	swap	r25
    1ee8:	90 7f       	andi	r25, 0xF0	; 240
    1eea:	98 27       	eor	r25, r24
    1eec:	80 7f       	andi	r24, 0xF0	; 240
    1eee:	98 27       	eor	r25, r24
    1ef0:	82 2b       	or	r24, r18
    1ef2:	8c 93       	st	X, r24
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	a0 e8       	ldi	r26, 0x80	; 128
    1efa:	bf e3       	ldi	r27, 0x3F	; 63
    1efc:	89 8f       	std	Y+25, r24	; 0x19
    1efe:	9a 8f       	std	Y+26, r25	; 0x1a
    1f00:	ab 8f       	std	Y+27, r26	; 0x1b
    1f02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f04:	69 8d       	ldd	r22, Y+25	; 0x19
    1f06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	4a e7       	ldi	r20, 0x7A	; 122
    1f12:	53 e4       	ldi	r21, 0x43	; 67
    1f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	8d 8b       	std	Y+21, r24	; 0x15
    1f1e:	9e 8b       	std	Y+22, r25	; 0x16
    1f20:	af 8b       	std	Y+23, r26	; 0x17
    1f22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f24:	6d 89       	ldd	r22, Y+21	; 0x15
    1f26:	7e 89       	ldd	r23, Y+22	; 0x16
    1f28:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e8       	ldi	r20, 0x80	; 128
    1f32:	5f e3       	ldi	r21, 0x3F	; 63
    1f34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f38:	88 23       	and	r24, r24
    1f3a:	2c f4       	brge	.+10     	; 0x1f46 <LCD_sendCommand+0x69e>
		__ticks = 1;
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	9c 8b       	std	Y+20, r25	; 0x14
    1f42:	8b 8b       	std	Y+19, r24	; 0x13
    1f44:	3f c0       	rjmp	.+126    	; 0x1fc4 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    1f46:	6d 89       	ldd	r22, Y+21	; 0x15
    1f48:	7e 89       	ldd	r23, Y+22	; 0x16
    1f4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	3f ef       	ldi	r19, 0xFF	; 255
    1f52:	4f e7       	ldi	r20, 0x7F	; 127
    1f54:	57 e4       	ldi	r21, 0x47	; 71
    1f56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f5a:	18 16       	cp	r1, r24
    1f5c:	4c f5       	brge	.+82     	; 0x1fb0 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e2       	ldi	r20, 0x20	; 32
    1f6c:	51 e4       	ldi	r21, 0x41	; 65
    1f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	bc 01       	movw	r22, r24
    1f78:	cd 01       	movw	r24, r26
    1f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	9c 8b       	std	Y+20, r25	; 0x14
    1f84:	8b 8b       	std	Y+19, r24	; 0x13
    1f86:	0f c0       	rjmp	.+30     	; 0x1fa6 <LCD_sendCommand+0x6fe>
    1f88:	89 e1       	ldi	r24, 0x19	; 25
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	9a 8b       	std	Y+18, r25	; 0x12
    1f8e:	89 8b       	std	Y+17, r24	; 0x11
    1f90:	89 89       	ldd	r24, Y+17	; 0x11
    1f92:	9a 89       	ldd	r25, Y+18	; 0x12
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <LCD_sendCommand+0x6ec>
    1f98:	9a 8b       	std	Y+18, r25	; 0x12
    1f9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	9c 8b       	std	Y+20, r25	; 0x14
    1fa4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa8:	9c 89       	ldd	r25, Y+20	; 0x14
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	69 f7       	brne	.-38     	; 0x1f88 <LCD_sendCommand+0x6e0>
    1fae:	14 c0       	rjmp	.+40     	; 0x1fd8 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	9c 8b       	std	Y+20, r25	; 0x14
    1fc2:	8b 8b       	std	Y+19, r24	; 0x13
    1fc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc8:	98 8b       	std	Y+16, r25	; 0x10
    1fca:	8f 87       	std	Y+15, r24	; 0x0f
    1fcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fce:	98 89       	ldd	r25, Y+16	; 0x10
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <LCD_sendCommand+0x728>
    1fd4:	98 8b       	std	Y+16, r25	; 0x10
    1fd6:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT=(LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    1fd8:	a2 e3       	ldi	r26, 0x32	; 50
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e2 e3       	ldi	r30, 0x32	; 50
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	8b 7f       	andi	r24, 0xFB	; 251
    1fe4:	8c 93       	st	X, r24
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	a0 e8       	ldi	r26, 0x80	; 128
    1fec:	bf e3       	ldi	r27, 0x3F	; 63
    1fee:	8b 87       	std	Y+11, r24	; 0x0b
    1ff0:	9c 87       	std	Y+12, r25	; 0x0c
    1ff2:	ad 87       	std	Y+13, r26	; 0x0d
    1ff4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	4a e7       	ldi	r20, 0x7A	; 122
    2004:	53 e4       	ldi	r21, 0x43	; 67
    2006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	8f 83       	std	Y+7, r24	; 0x07
    2010:	98 87       	std	Y+8, r25	; 0x08
    2012:	a9 87       	std	Y+9, r26	; 0x09
    2014:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2016:	6f 81       	ldd	r22, Y+7	; 0x07
    2018:	78 85       	ldd	r23, Y+8	; 0x08
    201a:	89 85       	ldd	r24, Y+9	; 0x09
    201c:	9a 85       	ldd	r25, Y+10	; 0x0a
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e8       	ldi	r20, 0x80	; 128
    2024:	5f e3       	ldi	r21, 0x3F	; 63
    2026:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    202a:	88 23       	and	r24, r24
    202c:	2c f4       	brge	.+10     	; 0x2038 <LCD_sendCommand+0x790>
		__ticks = 1;
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
    2036:	3f c0       	rjmp	.+126    	; 0x20b6 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    2038:	6f 81       	ldd	r22, Y+7	; 0x07
    203a:	78 85       	ldd	r23, Y+8	; 0x08
    203c:	89 85       	ldd	r24, Y+9	; 0x09
    203e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	3f ef       	ldi	r19, 0xFF	; 255
    2044:	4f e7       	ldi	r20, 0x7F	; 127
    2046:	57 e4       	ldi	r21, 0x47	; 71
    2048:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    204c:	18 16       	cp	r1, r24
    204e:	4c f5       	brge	.+82     	; 0x20a2 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2050:	6b 85       	ldd	r22, Y+11	; 0x0b
    2052:	7c 85       	ldd	r23, Y+12	; 0x0c
    2054:	8d 85       	ldd	r24, Y+13	; 0x0d
    2056:	9e 85       	ldd	r25, Y+14	; 0x0e
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e2       	ldi	r20, 0x20	; 32
    205e:	51 e4       	ldi	r21, 0x41	; 65
    2060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	bc 01       	movw	r22, r24
    206a:	cd 01       	movw	r24, r26
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	9e 83       	std	Y+6, r25	; 0x06
    2076:	8d 83       	std	Y+5, r24	; 0x05
    2078:	0f c0       	rjmp	.+30     	; 0x2098 <LCD_sendCommand+0x7f0>
    207a:	89 e1       	ldi	r24, 0x19	; 25
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	9c 83       	std	Y+4, r25	; 0x04
    2080:	8b 83       	std	Y+3, r24	; 0x03
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	9c 81       	ldd	r25, Y+4	; 0x04
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	f1 f7       	brne	.-4      	; 0x2086 <LCD_sendCommand+0x7de>
    208a:	9c 83       	std	Y+4, r25	; 0x04
    208c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
    2090:	9e 81       	ldd	r25, Y+6	; 0x06
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	9e 83       	std	Y+6, r25	; 0x06
    2096:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	69 f7       	brne	.-38     	; 0x207a <LCD_sendCommand+0x7d2>
    20a0:	14 c0       	rjmp	.+40     	; 0x20ca <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a2:	6f 81       	ldd	r22, Y+7	; 0x07
    20a4:	78 85       	ldd	r23, Y+8	; 0x08
    20a6:	89 85       	ldd	r24, Y+9	; 0x09
    20a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
    20b6:	8d 81       	ldd	r24, Y+5	; 0x05
    20b8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ba:	9a 83       	std	Y+2, r25	; 0x02
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	9a 81       	ldd	r25, Y+2	; 0x02
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <LCD_sendCommand+0x81a>
    20c6:	9a 83       	std	Y+2, r25	; 0x02
    20c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    20ca:	cd 59       	subi	r28, 0x9D	; 157
    20cc:	df 4f       	sbci	r29, 0xFF	; 255
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	08 95       	ret

000020e2 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data){
    20e2:	0f 93       	push	r16
    20e4:	1f 93       	push	r17
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	c3 56       	subi	r28, 0x63	; 99
    20f0:	d0 40       	sbci	r29, 0x00	; 0
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	fe 01       	movw	r30, r28
    20fe:	ed 59       	subi	r30, 0x9D	; 157
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS);
    2104:	a2 e3       	ldi	r26, 0x32	; 50
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e2 e3       	ldi	r30, 0x32	; 50
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	81 60       	ori	r24, 0x01	; 1
    2110:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
    2112:	a2 e3       	ldi	r26, 0x32	; 50
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e2 e3       	ldi	r30, 0x32	; 50
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	8d 7f       	andi	r24, 0xFD	; 253
    211e:	8c 93       	st	X, r24
    2120:	fe 01       	movw	r30, r28
    2122:	e1 5a       	subi	r30, 0xA1	; 161
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	a0 e8       	ldi	r26, 0x80	; 128
    212c:	bf e3       	ldi	r27, 0x3F	; 63
    212e:	80 83       	st	Z, r24
    2130:	91 83       	std	Z+1, r25	; 0x01
    2132:	a2 83       	std	Z+2, r26	; 0x02
    2134:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2136:	8e 01       	movw	r16, r28
    2138:	05 5a       	subi	r16, 0xA5	; 165
    213a:	1f 4f       	sbci	r17, 0xFF	; 255
    213c:	fe 01       	movw	r30, r28
    213e:	e1 5a       	subi	r30, 0xA1	; 161
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	60 81       	ld	r22, Z
    2144:	71 81       	ldd	r23, Z+1	; 0x01
    2146:	82 81       	ldd	r24, Z+2	; 0x02
    2148:	93 81       	ldd	r25, Z+3	; 0x03
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4a e7       	ldi	r20, 0x7A	; 122
    2150:	53 e4       	ldi	r21, 0x43	; 67
    2152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	f8 01       	movw	r30, r16
    215c:	80 83       	st	Z, r24
    215e:	91 83       	std	Z+1, r25	; 0x01
    2160:	a2 83       	std	Z+2, r26	; 0x02
    2162:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2164:	fe 01       	movw	r30, r28
    2166:	e5 5a       	subi	r30, 0xA5	; 165
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	60 81       	ld	r22, Z
    216c:	71 81       	ldd	r23, Z+1	; 0x01
    216e:	82 81       	ldd	r24, Z+2	; 0x02
    2170:	93 81       	ldd	r25, Z+3	; 0x03
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e8       	ldi	r20, 0x80	; 128
    2178:	5f e3       	ldi	r21, 0x3F	; 63
    217a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    217e:	88 23       	and	r24, r24
    2180:	44 f4       	brge	.+16     	; 0x2192 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    2182:	fe 01       	movw	r30, r28
    2184:	e7 5a       	subi	r30, 0xA7	; 167
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	80 83       	st	Z, r24
    2190:	64 c0       	rjmp	.+200    	; 0x225a <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2192:	fe 01       	movw	r30, r28
    2194:	e5 5a       	subi	r30, 0xA5	; 165
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	60 81       	ld	r22, Z
    219a:	71 81       	ldd	r23, Z+1	; 0x01
    219c:	82 81       	ldd	r24, Z+2	; 0x02
    219e:	93 81       	ldd	r25, Z+3	; 0x03
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	3f ef       	ldi	r19, 0xFF	; 255
    21a4:	4f e7       	ldi	r20, 0x7F	; 127
    21a6:	57 e4       	ldi	r21, 0x47	; 71
    21a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ac:	18 16       	cp	r1, r24
    21ae:	0c f0       	brlt	.+2      	; 0x21b2 <LCD_displayCharacter+0xd0>
    21b0:	43 c0       	rjmp	.+134    	; 0x2238 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b2:	fe 01       	movw	r30, r28
    21b4:	e1 5a       	subi	r30, 0xA1	; 161
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	60 81       	ld	r22, Z
    21ba:	71 81       	ldd	r23, Z+1	; 0x01
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	93 81       	ldd	r25, Z+3	; 0x03
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e2       	ldi	r20, 0x20	; 32
    21c6:	51 e4       	ldi	r21, 0x41	; 65
    21c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	8e 01       	movw	r16, r28
    21d2:	07 5a       	subi	r16, 0xA7	; 167
    21d4:	1f 4f       	sbci	r17, 0xFF	; 255
    21d6:	bc 01       	movw	r22, r24
    21d8:	cd 01       	movw	r24, r26
    21da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	f8 01       	movw	r30, r16
    21e4:	91 83       	std	Z+1, r25	; 0x01
    21e6:	80 83       	st	Z, r24
    21e8:	1f c0       	rjmp	.+62     	; 0x2228 <LCD_displayCharacter+0x146>
    21ea:	fe 01       	movw	r30, r28
    21ec:	e9 5a       	subi	r30, 0xA9	; 169
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	89 e1       	ldi	r24, 0x19	; 25
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	80 83       	st	Z, r24
    21f8:	fe 01       	movw	r30, r28
    21fa:	e9 5a       	subi	r30, 0xA9	; 169
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 81       	ld	r24, Z
    2200:	91 81       	ldd	r25, Z+1	; 0x01
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <LCD_displayCharacter+0x120>
    2206:	fe 01       	movw	r30, r28
    2208:	e9 5a       	subi	r30, 0xA9	; 169
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	91 83       	std	Z+1, r25	; 0x01
    220e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2210:	de 01       	movw	r26, r28
    2212:	a7 5a       	subi	r26, 0xA7	; 167
    2214:	bf 4f       	sbci	r27, 0xFF	; 255
    2216:	fe 01       	movw	r30, r28
    2218:	e7 5a       	subi	r30, 0xA7	; 167
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	80 81       	ld	r24, Z
    221e:	91 81       	ldd	r25, Z+1	; 0x01
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	11 96       	adiw	r26, 0x01	; 1
    2224:	9c 93       	st	X, r25
    2226:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2228:	fe 01       	movw	r30, r28
    222a:	e7 5a       	subi	r30, 0xA7	; 167
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	80 81       	ld	r24, Z
    2230:	91 81       	ldd	r25, Z+1	; 0x01
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	d1 f6       	brne	.-76     	; 0x21ea <LCD_displayCharacter+0x108>
    2236:	27 c0       	rjmp	.+78     	; 0x2286 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2238:	8e 01       	movw	r16, r28
    223a:	07 5a       	subi	r16, 0xA7	; 167
    223c:	1f 4f       	sbci	r17, 0xFF	; 255
    223e:	fe 01       	movw	r30, r28
    2240:	e5 5a       	subi	r30, 0xA5	; 165
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	60 81       	ld	r22, Z
    2246:	71 81       	ldd	r23, Z+1	; 0x01
    2248:	82 81       	ldd	r24, Z+2	; 0x02
    224a:	93 81       	ldd	r25, Z+3	; 0x03
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	f8 01       	movw	r30, r16
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	80 83       	st	Z, r24
    225a:	de 01       	movw	r26, r28
    225c:	ab 5a       	subi	r26, 0xAB	; 171
    225e:	bf 4f       	sbci	r27, 0xFF	; 255
    2260:	fe 01       	movw	r30, r28
    2262:	e7 5a       	subi	r30, 0xA7	; 167
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 81       	ld	r24, Z
    2268:	91 81       	ldd	r25, Z+1	; 0x01
    226a:	8d 93       	st	X+, r24
    226c:	9c 93       	st	X, r25
    226e:	fe 01       	movw	r30, r28
    2270:	eb 5a       	subi	r30, 0xAB	; 171
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 81       	ld	r24, Z
    2276:	91 81       	ldd	r25, Z+1	; 0x01
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <LCD_displayCharacter+0x196>
    227c:	fe 01       	movw	r30, r28
    227e:	eb 5a       	subi	r30, 0xAB	; 171
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	80 83       	st	Z, r24
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    2286:	a2 e3       	ldi	r26, 0x32	; 50
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e2 e3       	ldi	r30, 0x32	; 50
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	84 60       	ori	r24, 0x04	; 4
    2292:	8c 93       	st	X, r24
    2294:	fe 01       	movw	r30, r28
    2296:	ef 5a       	subi	r30, 0xAF	; 175
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	a0 e8       	ldi	r26, 0x80	; 128
    22a0:	bf e3       	ldi	r27, 0x3F	; 63
    22a2:	80 83       	st	Z, r24
    22a4:	91 83       	std	Z+1, r25	; 0x01
    22a6:	a2 83       	std	Z+2, r26	; 0x02
    22a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22aa:	8e 01       	movw	r16, r28
    22ac:	03 5b       	subi	r16, 0xB3	; 179
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	fe 01       	movw	r30, r28
    22b2:	ef 5a       	subi	r30, 0xAF	; 175
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	60 81       	ld	r22, Z
    22b8:	71 81       	ldd	r23, Z+1	; 0x01
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	93 81       	ldd	r25, Z+3	; 0x03
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	4a e7       	ldi	r20, 0x7A	; 122
    22c4:	53 e4       	ldi	r21, 0x43	; 67
    22c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	f8 01       	movw	r30, r16
    22d0:	80 83       	st	Z, r24
    22d2:	91 83       	std	Z+1, r25	; 0x01
    22d4:	a2 83       	std	Z+2, r26	; 0x02
    22d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22d8:	fe 01       	movw	r30, r28
    22da:	e3 5b       	subi	r30, 0xB3	; 179
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	60 81       	ld	r22, Z
    22e0:	71 81       	ldd	r23, Z+1	; 0x01
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	93 81       	ldd	r25, Z+3	; 0x03
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	5f e3       	ldi	r21, 0x3F	; 63
    22ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f2:	88 23       	and	r24, r24
    22f4:	44 f4       	brge	.+16     	; 0x2306 <LCD_displayCharacter+0x224>
		__ticks = 1;
    22f6:	fe 01       	movw	r30, r28
    22f8:	e5 5b       	subi	r30, 0xB5	; 181
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	91 83       	std	Z+1, r25	; 0x01
    2302:	80 83       	st	Z, r24
    2304:	64 c0       	rjmp	.+200    	; 0x23ce <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    2306:	fe 01       	movw	r30, r28
    2308:	e3 5b       	subi	r30, 0xB3	; 179
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	60 81       	ld	r22, Z
    230e:	71 81       	ldd	r23, Z+1	; 0x01
    2310:	82 81       	ldd	r24, Z+2	; 0x02
    2312:	93 81       	ldd	r25, Z+3	; 0x03
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	4f e7       	ldi	r20, 0x7F	; 127
    231a:	57 e4       	ldi	r21, 0x47	; 71
    231c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2320:	18 16       	cp	r1, r24
    2322:	0c f0       	brlt	.+2      	; 0x2326 <LCD_displayCharacter+0x244>
    2324:	43 c0       	rjmp	.+134    	; 0x23ac <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2326:	fe 01       	movw	r30, r28
    2328:	ef 5a       	subi	r30, 0xAF	; 175
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	60 81       	ld	r22, Z
    232e:	71 81       	ldd	r23, Z+1	; 0x01
    2330:	82 81       	ldd	r24, Z+2	; 0x02
    2332:	93 81       	ldd	r25, Z+3	; 0x03
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e2       	ldi	r20, 0x20	; 32
    233a:	51 e4       	ldi	r21, 0x41	; 65
    233c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	8e 01       	movw	r16, r28
    2346:	05 5b       	subi	r16, 0xB5	; 181
    2348:	1f 4f       	sbci	r17, 0xFF	; 255
    234a:	bc 01       	movw	r22, r24
    234c:	cd 01       	movw	r24, r26
    234e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	f8 01       	movw	r30, r16
    2358:	91 83       	std	Z+1, r25	; 0x01
    235a:	80 83       	st	Z, r24
    235c:	1f c0       	rjmp	.+62     	; 0x239c <LCD_displayCharacter+0x2ba>
    235e:	fe 01       	movw	r30, r28
    2360:	e7 5b       	subi	r30, 0xB7	; 183
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	89 e1       	ldi	r24, 0x19	; 25
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	91 83       	std	Z+1, r25	; 0x01
    236a:	80 83       	st	Z, r24
    236c:	fe 01       	movw	r30, r28
    236e:	e7 5b       	subi	r30, 0xB7	; 183
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	91 81       	ldd	r25, Z+1	; 0x01
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <LCD_displayCharacter+0x294>
    237a:	fe 01       	movw	r30, r28
    237c:	e7 5b       	subi	r30, 0xB7	; 183
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	91 83       	std	Z+1, r25	; 0x01
    2382:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2384:	de 01       	movw	r26, r28
    2386:	a5 5b       	subi	r26, 0xB5	; 181
    2388:	bf 4f       	sbci	r27, 0xFF	; 255
    238a:	fe 01       	movw	r30, r28
    238c:	e5 5b       	subi	r30, 0xB5	; 181
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	80 81       	ld	r24, Z
    2392:	91 81       	ldd	r25, Z+1	; 0x01
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	11 96       	adiw	r26, 0x01	; 1
    2398:	9c 93       	st	X, r25
    239a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239c:	fe 01       	movw	r30, r28
    239e:	e5 5b       	subi	r30, 0xB5	; 181
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	80 81       	ld	r24, Z
    23a4:	91 81       	ldd	r25, Z+1	; 0x01
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	d1 f6       	brne	.-76     	; 0x235e <LCD_displayCharacter+0x27c>
    23aa:	27 c0       	rjmp	.+78     	; 0x23fa <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ac:	8e 01       	movw	r16, r28
    23ae:	05 5b       	subi	r16, 0xB5	; 181
    23b0:	1f 4f       	sbci	r17, 0xFF	; 255
    23b2:	fe 01       	movw	r30, r28
    23b4:	e3 5b       	subi	r30, 0xB3	; 179
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	60 81       	ld	r22, Z
    23ba:	71 81       	ldd	r23, Z+1	; 0x01
    23bc:	82 81       	ldd	r24, Z+2	; 0x02
    23be:	93 81       	ldd	r25, Z+3	; 0x03
    23c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	f8 01       	movw	r30, r16
    23ca:	91 83       	std	Z+1, r25	; 0x01
    23cc:	80 83       	st	Z, r24
    23ce:	de 01       	movw	r26, r28
    23d0:	a9 5b       	subi	r26, 0xB9	; 185
    23d2:	bf 4f       	sbci	r27, 0xFF	; 255
    23d4:	fe 01       	movw	r30, r28
    23d6:	e5 5b       	subi	r30, 0xB5	; 181
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 81       	ld	r24, Z
    23dc:	91 81       	ldd	r25, Z+1	; 0x01
    23de:	8d 93       	st	X+, r24
    23e0:	9c 93       	st	X, r25
    23e2:	fe 01       	movw	r30, r28
    23e4:	e9 5b       	subi	r30, 0xB9	; 185
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	80 81       	ld	r24, Z
    23ea:	91 81       	ldd	r25, Z+1	; 0x01
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <LCD_displayCharacter+0x30a>
    23f0:	fe 01       	movw	r30, r28
    23f2:	e9 5b       	subi	r30, 0xB9	; 185
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	91 83       	std	Z+1, r25	; 0x01
    23f8:	80 83       	st	Z, r24
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
	_delay_ms(1);
#elif(LCD_BIT_MODE==4)
#ifdef UPPER_PORT_PIN
	LCD_DATA_PORT=(LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    23fa:	a5 e3       	ldi	r26, 0x35	; 53
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e5 e3       	ldi	r30, 0x35	; 53
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	98 2f       	mov	r25, r24
    2406:	9f 70       	andi	r25, 0x0F	; 15
    2408:	fe 01       	movw	r30, r28
    240a:	ed 59       	subi	r30, 0x9D	; 157
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	80 81       	ld	r24, Z
    2410:	80 7f       	andi	r24, 0xF0	; 240
    2412:	89 2b       	or	r24, r25
    2414:	8c 93       	st	X, r24
    2416:	fe 01       	movw	r30, r28
    2418:	ed 5b       	subi	r30, 0xBD	; 189
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	a0 e8       	ldi	r26, 0x80	; 128
    2422:	bf e3       	ldi	r27, 0x3F	; 63
    2424:	80 83       	st	Z, r24
    2426:	91 83       	std	Z+1, r25	; 0x01
    2428:	a2 83       	std	Z+2, r26	; 0x02
    242a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242c:	8e 01       	movw	r16, r28
    242e:	01 5c       	subi	r16, 0xC1	; 193
    2430:	1f 4f       	sbci	r17, 0xFF	; 255
    2432:	fe 01       	movw	r30, r28
    2434:	ed 5b       	subi	r30, 0xBD	; 189
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	60 81       	ld	r22, Z
    243a:	71 81       	ldd	r23, Z+1	; 0x01
    243c:	82 81       	ldd	r24, Z+2	; 0x02
    243e:	93 81       	ldd	r25, Z+3	; 0x03
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	4a e7       	ldi	r20, 0x7A	; 122
    2446:	53 e4       	ldi	r21, 0x43	; 67
    2448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	f8 01       	movw	r30, r16
    2452:	80 83       	st	Z, r24
    2454:	91 83       	std	Z+1, r25	; 0x01
    2456:	a2 83       	std	Z+2, r26	; 0x02
    2458:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    245a:	fe 01       	movw	r30, r28
    245c:	ff 96       	adiw	r30, 0x3f	; 63
    245e:	60 81       	ld	r22, Z
    2460:	71 81       	ldd	r23, Z+1	; 0x01
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e8       	ldi	r20, 0x80	; 128
    246c:	5f e3       	ldi	r21, 0x3F	; 63
    246e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2472:	88 23       	and	r24, r24
    2474:	2c f4       	brge	.+10     	; 0x2480 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	9e af       	std	Y+62, r25	; 0x3e
    247c:	8d af       	std	Y+61, r24	; 0x3d
    247e:	46 c0       	rjmp	.+140    	; 0x250c <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    2480:	fe 01       	movw	r30, r28
    2482:	ff 96       	adiw	r30, 0x3f	; 63
    2484:	60 81       	ld	r22, Z
    2486:	71 81       	ldd	r23, Z+1	; 0x01
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	3f ef       	ldi	r19, 0xFF	; 255
    2490:	4f e7       	ldi	r20, 0x7F	; 127
    2492:	57 e4       	ldi	r21, 0x47	; 71
    2494:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2498:	18 16       	cp	r1, r24
    249a:	64 f5       	brge	.+88     	; 0x24f4 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249c:	fe 01       	movw	r30, r28
    249e:	ed 5b       	subi	r30, 0xBD	; 189
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	60 81       	ld	r22, Z
    24a4:	71 81       	ldd	r23, Z+1	; 0x01
    24a6:	82 81       	ldd	r24, Z+2	; 0x02
    24a8:	93 81       	ldd	r25, Z+3	; 0x03
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e2       	ldi	r20, 0x20	; 32
    24b0:	51 e4       	ldi	r21, 0x41	; 65
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	9e af       	std	Y+62, r25	; 0x3e
    24c8:	8d af       	std	Y+61, r24	; 0x3d
    24ca:	0f c0       	rjmp	.+30     	; 0x24ea <LCD_displayCharacter+0x408>
    24cc:	89 e1       	ldi	r24, 0x19	; 25
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	9c af       	std	Y+60, r25	; 0x3c
    24d2:	8b af       	std	Y+59, r24	; 0x3b
    24d4:	8b ad       	ldd	r24, Y+59	; 0x3b
    24d6:	9c ad       	ldd	r25, Y+60	; 0x3c
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_displayCharacter+0x3f6>
    24dc:	9c af       	std	Y+60, r25	; 0x3c
    24de:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    24e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	9e af       	std	Y+62, r25	; 0x3e
    24e8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    24ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	69 f7       	brne	.-38     	; 0x24cc <LCD_displayCharacter+0x3ea>
    24f2:	16 c0       	rjmp	.+44     	; 0x2520 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f4:	fe 01       	movw	r30, r28
    24f6:	ff 96       	adiw	r30, 0x3f	; 63
    24f8:	60 81       	ld	r22, Z
    24fa:	71 81       	ldd	r23, Z+1	; 0x01
    24fc:	82 81       	ldd	r24, Z+2	; 0x02
    24fe:	93 81       	ldd	r25, Z+3	; 0x03
    2500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9e af       	std	Y+62, r25	; 0x3e
    250a:	8d af       	std	Y+61, r24	; 0x3d
    250c:	8d ad       	ldd	r24, Y+61	; 0x3d
    250e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2510:	9a af       	std	Y+58, r25	; 0x3a
    2512:	89 af       	std	Y+57, r24	; 0x39
    2514:	89 ad       	ldd	r24, Y+57	; 0x39
    2516:	9a ad       	ldd	r25, Y+58	; 0x3a
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <LCD_displayCharacter+0x436>
    251c:	9a af       	std	Y+58, r25	; 0x3a
    251e:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT=(LCD_DATA_PORT & 0xF0) | ((data & 0xF0)>>4);
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    2520:	a2 e3       	ldi	r26, 0x32	; 50
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e2 e3       	ldi	r30, 0x32	; 50
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	8b 7f       	andi	r24, 0xFB	; 251
    252c:	8c 93       	st	X, r24
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	a0 e8       	ldi	r26, 0x80	; 128
    2534:	bf e3       	ldi	r27, 0x3F	; 63
    2536:	8d ab       	std	Y+53, r24	; 0x35
    2538:	9e ab       	std	Y+54, r25	; 0x36
    253a:	af ab       	std	Y+55, r26	; 0x37
    253c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253e:	6d a9       	ldd	r22, Y+53	; 0x35
    2540:	7e a9       	ldd	r23, Y+54	; 0x36
    2542:	8f a9       	ldd	r24, Y+55	; 0x37
    2544:	98 ad       	ldd	r25, Y+56	; 0x38
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	4a e7       	ldi	r20, 0x7A	; 122
    254c:	53 e4       	ldi	r21, 0x43	; 67
    254e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	89 ab       	std	Y+49, r24	; 0x31
    2558:	9a ab       	std	Y+50, r25	; 0x32
    255a:	ab ab       	std	Y+51, r26	; 0x33
    255c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    255e:	69 a9       	ldd	r22, Y+49	; 0x31
    2560:	7a a9       	ldd	r23, Y+50	; 0x32
    2562:	8b a9       	ldd	r24, Y+51	; 0x33
    2564:	9c a9       	ldd	r25, Y+52	; 0x34
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e8       	ldi	r20, 0x80	; 128
    256c:	5f e3       	ldi	r21, 0x3F	; 63
    256e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2572:	88 23       	and	r24, r24
    2574:	2c f4       	brge	.+10     	; 0x2580 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	98 ab       	std	Y+48, r25	; 0x30
    257c:	8f a7       	std	Y+47, r24	; 0x2f
    257e:	3f c0       	rjmp	.+126    	; 0x25fe <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    2580:	69 a9       	ldd	r22, Y+49	; 0x31
    2582:	7a a9       	ldd	r23, Y+50	; 0x32
    2584:	8b a9       	ldd	r24, Y+51	; 0x33
    2586:	9c a9       	ldd	r25, Y+52	; 0x34
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	3f ef       	ldi	r19, 0xFF	; 255
    258c:	4f e7       	ldi	r20, 0x7F	; 127
    258e:	57 e4       	ldi	r21, 0x47	; 71
    2590:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2594:	18 16       	cp	r1, r24
    2596:	4c f5       	brge	.+82     	; 0x25ea <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2598:	6d a9       	ldd	r22, Y+53	; 0x35
    259a:	7e a9       	ldd	r23, Y+54	; 0x36
    259c:	8f a9       	ldd	r24, Y+55	; 0x37
    259e:	98 ad       	ldd	r25, Y+56	; 0x38
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e2       	ldi	r20, 0x20	; 32
    25a6:	51 e4       	ldi	r21, 0x41	; 65
    25a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	bc 01       	movw	r22, r24
    25b2:	cd 01       	movw	r24, r26
    25b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	98 ab       	std	Y+48, r25	; 0x30
    25be:	8f a7       	std	Y+47, r24	; 0x2f
    25c0:	0f c0       	rjmp	.+30     	; 0x25e0 <LCD_displayCharacter+0x4fe>
    25c2:	89 e1       	ldi	r24, 0x19	; 25
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	9e a7       	std	Y+46, r25	; 0x2e
    25c8:	8d a7       	std	Y+45, r24	; 0x2d
    25ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    25cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <LCD_displayCharacter+0x4ec>
    25d2:	9e a7       	std	Y+46, r25	; 0x2e
    25d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25d8:	98 a9       	ldd	r25, Y+48	; 0x30
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	98 ab       	std	Y+48, r25	; 0x30
    25de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e2:	98 a9       	ldd	r25, Y+48	; 0x30
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	69 f7       	brne	.-38     	; 0x25c2 <LCD_displayCharacter+0x4e0>
    25e8:	14 c0       	rjmp	.+40     	; 0x2612 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ea:	69 a9       	ldd	r22, Y+49	; 0x31
    25ec:	7a a9       	ldd	r23, Y+50	; 0x32
    25ee:	8b a9       	ldd	r24, Y+51	; 0x33
    25f0:	9c a9       	ldd	r25, Y+52	; 0x34
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	98 ab       	std	Y+48, r25	; 0x30
    25fc:	8f a7       	std	Y+47, r24	; 0x2f
    25fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2600:	98 a9       	ldd	r25, Y+48	; 0x30
    2602:	9c a7       	std	Y+44, r25	; 0x2c
    2604:	8b a7       	std	Y+43, r24	; 0x2b
    2606:	8b a5       	ldd	r24, Y+43	; 0x2b
    2608:	9c a5       	ldd	r25, Y+44	; 0x2c
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <LCD_displayCharacter+0x528>
    260e:	9c a7       	std	Y+44, r25	; 0x2c
    2610:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    2612:	a2 e3       	ldi	r26, 0x32	; 50
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e2 e3       	ldi	r30, 0x32	; 50
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	84 60       	ori	r24, 0x04	; 4
    261e:	8c 93       	st	X, r24
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	a0 e8       	ldi	r26, 0x80	; 128
    2626:	bf e3       	ldi	r27, 0x3F	; 63
    2628:	8f a3       	std	Y+39, r24	; 0x27
    262a:	98 a7       	std	Y+40, r25	; 0x28
    262c:	a9 a7       	std	Y+41, r26	; 0x29
    262e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2630:	6f a1       	ldd	r22, Y+39	; 0x27
    2632:	78 a5       	ldd	r23, Y+40	; 0x28
    2634:	89 a5       	ldd	r24, Y+41	; 0x29
    2636:	9a a5       	ldd	r25, Y+42	; 0x2a
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	4a e7       	ldi	r20, 0x7A	; 122
    263e:	53 e4       	ldi	r21, 0x43	; 67
    2640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	8b a3       	std	Y+35, r24	; 0x23
    264a:	9c a3       	std	Y+36, r25	; 0x24
    264c:	ad a3       	std	Y+37, r26	; 0x25
    264e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2650:	6b a1       	ldd	r22, Y+35	; 0x23
    2652:	7c a1       	ldd	r23, Y+36	; 0x24
    2654:	8d a1       	ldd	r24, Y+37	; 0x25
    2656:	9e a1       	ldd	r25, Y+38	; 0x26
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e8       	ldi	r20, 0x80	; 128
    265e:	5f e3       	ldi	r21, 0x3F	; 63
    2660:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2664:	88 23       	and	r24, r24
    2666:	2c f4       	brge	.+10     	; 0x2672 <LCD_displayCharacter+0x590>
		__ticks = 1;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	9a a3       	std	Y+34, r25	; 0x22
    266e:	89 a3       	std	Y+33, r24	; 0x21
    2670:	3f c0       	rjmp	.+126    	; 0x26f0 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    2672:	6b a1       	ldd	r22, Y+35	; 0x23
    2674:	7c a1       	ldd	r23, Y+36	; 0x24
    2676:	8d a1       	ldd	r24, Y+37	; 0x25
    2678:	9e a1       	ldd	r25, Y+38	; 0x26
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	3f ef       	ldi	r19, 0xFF	; 255
    267e:	4f e7       	ldi	r20, 0x7F	; 127
    2680:	57 e4       	ldi	r21, 0x47	; 71
    2682:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2686:	18 16       	cp	r1, r24
    2688:	4c f5       	brge	.+82     	; 0x26dc <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268a:	6f a1       	ldd	r22, Y+39	; 0x27
    268c:	78 a5       	ldd	r23, Y+40	; 0x28
    268e:	89 a5       	ldd	r24, Y+41	; 0x29
    2690:	9a a5       	ldd	r25, Y+42	; 0x2a
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e2       	ldi	r20, 0x20	; 32
    2698:	51 e4       	ldi	r21, 0x41	; 65
    269a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	bc 01       	movw	r22, r24
    26a4:	cd 01       	movw	r24, r26
    26a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	9a a3       	std	Y+34, r25	; 0x22
    26b0:	89 a3       	std	Y+33, r24	; 0x21
    26b2:	0f c0       	rjmp	.+30     	; 0x26d2 <LCD_displayCharacter+0x5f0>
    26b4:	89 e1       	ldi	r24, 0x19	; 25
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	98 a3       	std	Y+32, r25	; 0x20
    26ba:	8f 8f       	std	Y+31, r24	; 0x1f
    26bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26be:	98 a1       	ldd	r25, Y+32	; 0x20
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <LCD_displayCharacter+0x5de>
    26c4:	98 a3       	std	Y+32, r25	; 0x20
    26c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c8:	89 a1       	ldd	r24, Y+33	; 0x21
    26ca:	9a a1       	ldd	r25, Y+34	; 0x22
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	9a a3       	std	Y+34, r25	; 0x22
    26d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d2:	89 a1       	ldd	r24, Y+33	; 0x21
    26d4:	9a a1       	ldd	r25, Y+34	; 0x22
    26d6:	00 97       	sbiw	r24, 0x00	; 0
    26d8:	69 f7       	brne	.-38     	; 0x26b4 <LCD_displayCharacter+0x5d2>
    26da:	14 c0       	rjmp	.+40     	; 0x2704 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26dc:	6b a1       	ldd	r22, Y+35	; 0x23
    26de:	7c a1       	ldd	r23, Y+36	; 0x24
    26e0:	8d a1       	ldd	r24, Y+37	; 0x25
    26e2:	9e a1       	ldd	r25, Y+38	; 0x26
    26e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	9a a3       	std	Y+34, r25	; 0x22
    26ee:	89 a3       	std	Y+33, r24	; 0x21
    26f0:	89 a1       	ldd	r24, Y+33	; 0x21
    26f2:	9a a1       	ldd	r25, Y+34	; 0x22
    26f4:	9e 8f       	std	Y+30, r25	; 0x1e
    26f6:	8d 8f       	std	Y+29, r24	; 0x1d
    26f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	f1 f7       	brne	.-4      	; 0x26fc <LCD_displayCharacter+0x61a>
    2700:	9e 8f       	std	Y+30, r25	; 0x1e
    2702:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#ifdef UPPER_PORT_PIN
	LCD_DATA_PORT=(LCD_DATA_PORT & 0x0F) | ((data & 0x0F)<<4);
    2704:	a5 e3       	ldi	r26, 0x35	; 53
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	e5 e3       	ldi	r30, 0x35	; 53
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	28 2f       	mov	r18, r24
    2710:	2f 70       	andi	r18, 0x0F	; 15
    2712:	fe 01       	movw	r30, r28
    2714:	ed 59       	subi	r30, 0x9D	; 157
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 81       	ld	r24, Z
    271a:	88 2f       	mov	r24, r24
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	82 95       	swap	r24
    2720:	92 95       	swap	r25
    2722:	90 7f       	andi	r25, 0xF0	; 240
    2724:	98 27       	eor	r25, r24
    2726:	80 7f       	andi	r24, 0xF0	; 240
    2728:	98 27       	eor	r25, r24
    272a:	82 2b       	or	r24, r18
    272c:	8c 93       	st	X, r24
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	a0 e8       	ldi	r26, 0x80	; 128
    2734:	bf e3       	ldi	r27, 0x3F	; 63
    2736:	89 8f       	std	Y+25, r24	; 0x19
    2738:	9a 8f       	std	Y+26, r25	; 0x1a
    273a:	ab 8f       	std	Y+27, r26	; 0x1b
    273c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273e:	69 8d       	ldd	r22, Y+25	; 0x19
    2740:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2742:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2744:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	4a e7       	ldi	r20, 0x7A	; 122
    274c:	53 e4       	ldi	r21, 0x43	; 67
    274e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	8d 8b       	std	Y+21, r24	; 0x15
    2758:	9e 8b       	std	Y+22, r25	; 0x16
    275a:	af 8b       	std	Y+23, r26	; 0x17
    275c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    275e:	6d 89       	ldd	r22, Y+21	; 0x15
    2760:	7e 89       	ldd	r23, Y+22	; 0x16
    2762:	8f 89       	ldd	r24, Y+23	; 0x17
    2764:	98 8d       	ldd	r25, Y+24	; 0x18
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e8       	ldi	r20, 0x80	; 128
    276c:	5f e3       	ldi	r21, 0x3F	; 63
    276e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2772:	88 23       	and	r24, r24
    2774:	2c f4       	brge	.+10     	; 0x2780 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	9c 8b       	std	Y+20, r25	; 0x14
    277c:	8b 8b       	std	Y+19, r24	; 0x13
    277e:	3f c0       	rjmp	.+126    	; 0x27fe <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    2780:	6d 89       	ldd	r22, Y+21	; 0x15
    2782:	7e 89       	ldd	r23, Y+22	; 0x16
    2784:	8f 89       	ldd	r24, Y+23	; 0x17
    2786:	98 8d       	ldd	r25, Y+24	; 0x18
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	3f ef       	ldi	r19, 0xFF	; 255
    278c:	4f e7       	ldi	r20, 0x7F	; 127
    278e:	57 e4       	ldi	r21, 0x47	; 71
    2790:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2794:	18 16       	cp	r1, r24
    2796:	4c f5       	brge	.+82     	; 0x27ea <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2798:	69 8d       	ldd	r22, Y+25	; 0x19
    279a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    279c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    279e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e2       	ldi	r20, 0x20	; 32
    27a6:	51 e4       	ldi	r21, 0x41	; 65
    27a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	bc 01       	movw	r22, r24
    27b2:	cd 01       	movw	r24, r26
    27b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	9c 8b       	std	Y+20, r25	; 0x14
    27be:	8b 8b       	std	Y+19, r24	; 0x13
    27c0:	0f c0       	rjmp	.+30     	; 0x27e0 <LCD_displayCharacter+0x6fe>
    27c2:	89 e1       	ldi	r24, 0x19	; 25
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	9a 8b       	std	Y+18, r25	; 0x12
    27c8:	89 8b       	std	Y+17, r24	; 0x11
    27ca:	89 89       	ldd	r24, Y+17	; 0x11
    27cc:	9a 89       	ldd	r25, Y+18	; 0x12
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <LCD_displayCharacter+0x6ec>
    27d2:	9a 8b       	std	Y+18, r25	; 0x12
    27d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d6:	8b 89       	ldd	r24, Y+19	; 0x13
    27d8:	9c 89       	ldd	r25, Y+20	; 0x14
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	9c 8b       	std	Y+20, r25	; 0x14
    27de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e0:	8b 89       	ldd	r24, Y+19	; 0x13
    27e2:	9c 89       	ldd	r25, Y+20	; 0x14
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	69 f7       	brne	.-38     	; 0x27c2 <LCD_displayCharacter+0x6e0>
    27e8:	14 c0       	rjmp	.+40     	; 0x2812 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ea:	6d 89       	ldd	r22, Y+21	; 0x15
    27ec:	7e 89       	ldd	r23, Y+22	; 0x16
    27ee:	8f 89       	ldd	r24, Y+23	; 0x17
    27f0:	98 8d       	ldd	r25, Y+24	; 0x18
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	9c 8b       	std	Y+20, r25	; 0x14
    27fc:	8b 8b       	std	Y+19, r24	; 0x13
    27fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2800:	9c 89       	ldd	r25, Y+20	; 0x14
    2802:	98 8b       	std	Y+16, r25	; 0x10
    2804:	8f 87       	std	Y+15, r24	; 0x0f
    2806:	8f 85       	ldd	r24, Y+15	; 0x0f
    2808:	98 89       	ldd	r25, Y+16	; 0x10
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <LCD_displayCharacter+0x728>
    280e:	98 8b       	std	Y+16, r25	; 0x10
    2810:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT=(LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    2812:	a2 e3       	ldi	r26, 0x32	; 50
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	e2 e3       	ldi	r30, 0x32	; 50
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	8b 7f       	andi	r24, 0xFB	; 251
    281e:	8c 93       	st	X, r24
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	a0 e8       	ldi	r26, 0x80	; 128
    2826:	bf e3       	ldi	r27, 0x3F	; 63
    2828:	8b 87       	std	Y+11, r24	; 0x0b
    282a:	9c 87       	std	Y+12, r25	; 0x0c
    282c:	ad 87       	std	Y+13, r26	; 0x0d
    282e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2830:	6b 85       	ldd	r22, Y+11	; 0x0b
    2832:	7c 85       	ldd	r23, Y+12	; 0x0c
    2834:	8d 85       	ldd	r24, Y+13	; 0x0d
    2836:	9e 85       	ldd	r25, Y+14	; 0x0e
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	4a e7       	ldi	r20, 0x7A	; 122
    283e:	53 e4       	ldi	r21, 0x43	; 67
    2840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	8f 83       	std	Y+7, r24	; 0x07
    284a:	98 87       	std	Y+8, r25	; 0x08
    284c:	a9 87       	std	Y+9, r26	; 0x09
    284e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2850:	6f 81       	ldd	r22, Y+7	; 0x07
    2852:	78 85       	ldd	r23, Y+8	; 0x08
    2854:	89 85       	ldd	r24, Y+9	; 0x09
    2856:	9a 85       	ldd	r25, Y+10	; 0x0a
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e8       	ldi	r20, 0x80	; 128
    285e:	5f e3       	ldi	r21, 0x3F	; 63
    2860:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2864:	88 23       	and	r24, r24
    2866:	2c f4       	brge	.+10     	; 0x2872 <LCD_displayCharacter+0x790>
		__ticks = 1;
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	9e 83       	std	Y+6, r25	; 0x06
    286e:	8d 83       	std	Y+5, r24	; 0x05
    2870:	3f c0       	rjmp	.+126    	; 0x28f0 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    2872:	6f 81       	ldd	r22, Y+7	; 0x07
    2874:	78 85       	ldd	r23, Y+8	; 0x08
    2876:	89 85       	ldd	r24, Y+9	; 0x09
    2878:	9a 85       	ldd	r25, Y+10	; 0x0a
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	3f ef       	ldi	r19, 0xFF	; 255
    287e:	4f e7       	ldi	r20, 0x7F	; 127
    2880:	57 e4       	ldi	r21, 0x47	; 71
    2882:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2886:	18 16       	cp	r1, r24
    2888:	4c f5       	brge	.+82     	; 0x28dc <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288a:	6b 85       	ldd	r22, Y+11	; 0x0b
    288c:	7c 85       	ldd	r23, Y+12	; 0x0c
    288e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2890:	9e 85       	ldd	r25, Y+14	; 0x0e
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	40 e2       	ldi	r20, 0x20	; 32
    2898:	51 e4       	ldi	r21, 0x41	; 65
    289a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	bc 01       	movw	r22, r24
    28a4:	cd 01       	movw	r24, r26
    28a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	9e 83       	std	Y+6, r25	; 0x06
    28b0:	8d 83       	std	Y+5, r24	; 0x05
    28b2:	0f c0       	rjmp	.+30     	; 0x28d2 <LCD_displayCharacter+0x7f0>
    28b4:	89 e1       	ldi	r24, 0x19	; 25
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	9c 83       	std	Y+4, r25	; 0x04
    28ba:	8b 83       	std	Y+3, r24	; 0x03
    28bc:	8b 81       	ldd	r24, Y+3	; 0x03
    28be:	9c 81       	ldd	r25, Y+4	; 0x04
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <LCD_displayCharacter+0x7de>
    28c4:	9c 83       	std	Y+4, r25	; 0x04
    28c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ca:	9e 81       	ldd	r25, Y+6	; 0x06
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	9e 83       	std	Y+6, r25	; 0x06
    28d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d2:	8d 81       	ldd	r24, Y+5	; 0x05
    28d4:	9e 81       	ldd	r25, Y+6	; 0x06
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	69 f7       	brne	.-38     	; 0x28b4 <LCD_displayCharacter+0x7d2>
    28da:	14 c0       	rjmp	.+40     	; 0x2904 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28dc:	6f 81       	ldd	r22, Y+7	; 0x07
    28de:	78 85       	ldd	r23, Y+8	; 0x08
    28e0:	89 85       	ldd	r24, Y+9	; 0x09
    28e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	9e 83       	std	Y+6, r25	; 0x06
    28ee:	8d 83       	std	Y+5, r24	; 0x05
    28f0:	8d 81       	ldd	r24, Y+5	; 0x05
    28f2:	9e 81       	ldd	r25, Y+6	; 0x06
    28f4:	9a 83       	std	Y+2, r25	; 0x02
    28f6:	89 83       	std	Y+1, r24	; 0x01
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	9a 81       	ldd	r25, Y+2	; 0x02
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <LCD_displayCharacter+0x81a>
    2900:	9a 83       	std	Y+2, r25	; 0x02
    2902:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    2904:	cd 59       	subi	r28, 0x9D	; 157
    2906:	df 4f       	sbci	r29, 0xFF	; 255
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	1f 91       	pop	r17
    2918:	0f 91       	pop	r16
    291a:	08 95       	ret

0000291c <LCD_displayString>:

void LCD_displayString(const char *ptr){
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	00 d0       	rcall	.+0      	; 0x2922 <LCD_displayString+0x6>
    2922:	0f 92       	push	r0
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	9b 83       	std	Y+3, r25	; 0x03
    292a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    292c:	19 82       	std	Y+1, r1	; 0x01
    292e:	0e c0       	rjmp	.+28     	; 0x294c <LCD_displayString+0x30>
	while(ptr[i]!='\0'){
		LCD_displayCharacter(ptr[i]);
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	28 2f       	mov	r18, r24
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	9b 81       	ldd	r25, Y+3	; 0x03
    293a:	fc 01       	movw	r30, r24
    293c:	e2 0f       	add	r30, r18
    293e:	f3 1f       	adc	r31, r19
    2940:	80 81       	ld	r24, Z
    2942:	0e 94 71 10 	call	0x20e2	; 0x20e2 <LCD_displayCharacter>
		i++;
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	8f 5f       	subi	r24, 0xFF	; 255
    294a:	89 83       	std	Y+1, r24	; 0x01
#endif
}

void LCD_displayString(const char *ptr){
	uint8 i=0;
	while(ptr[i]!='\0'){
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	28 2f       	mov	r18, r24
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	9b 81       	ldd	r25, Y+3	; 0x03
    2956:	fc 01       	movw	r30, r24
    2958:	e2 0f       	add	r30, r18
    295a:	f3 1f       	adc	r31, r19
    295c:	80 81       	ld	r24, Z
    295e:	88 23       	and	r24, r24
    2960:	39 f7       	brne	.-50     	; 0x2930 <LCD_displayString+0x14>
		LCD_displayCharacter(ptr[i]);
		i++;
	}
}
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	08 95       	ret

0000296e <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col){
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	00 d0       	rcall	.+0      	; 0x2974 <LCD_goToRowColumn+0x6>
    2974:	00 d0       	rcall	.+0      	; 0x2976 <LCD_goToRowColumn+0x8>
    2976:	0f 92       	push	r0
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	8a 83       	std	Y+2, r24	; 0x02
    297e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row){
    2980:	8a 81       	ldd	r24, Y+2	; 0x02
    2982:	28 2f       	mov	r18, r24
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	3d 83       	std	Y+5, r19	; 0x05
    2988:	2c 83       	std	Y+4, r18	; 0x04
    298a:	8c 81       	ldd	r24, Y+4	; 0x04
    298c:	9d 81       	ldd	r25, Y+5	; 0x05
    298e:	81 30       	cpi	r24, 0x01	; 1
    2990:	91 05       	cpc	r25, r1
    2992:	c1 f0       	breq	.+48     	; 0x29c4 <LCD_goToRowColumn+0x56>
    2994:	2c 81       	ldd	r18, Y+4	; 0x04
    2996:	3d 81       	ldd	r19, Y+5	; 0x05
    2998:	22 30       	cpi	r18, 0x02	; 2
    299a:	31 05       	cpc	r19, r1
    299c:	2c f4       	brge	.+10     	; 0x29a8 <LCD_goToRowColumn+0x3a>
    299e:	8c 81       	ldd	r24, Y+4	; 0x04
    29a0:	9d 81       	ldd	r25, Y+5	; 0x05
    29a2:	00 97       	sbiw	r24, 0x00	; 0
    29a4:	61 f0       	breq	.+24     	; 0x29be <LCD_goToRowColumn+0x50>
    29a6:	19 c0       	rjmp	.+50     	; 0x29da <LCD_goToRowColumn+0x6c>
    29a8:	2c 81       	ldd	r18, Y+4	; 0x04
    29aa:	3d 81       	ldd	r19, Y+5	; 0x05
    29ac:	22 30       	cpi	r18, 0x02	; 2
    29ae:	31 05       	cpc	r19, r1
    29b0:	69 f0       	breq	.+26     	; 0x29cc <LCD_goToRowColumn+0x5e>
    29b2:	8c 81       	ldd	r24, Y+4	; 0x04
    29b4:	9d 81       	ldd	r25, Y+5	; 0x05
    29b6:	83 30       	cpi	r24, 0x03	; 3
    29b8:	91 05       	cpc	r25, r1
    29ba:	61 f0       	breq	.+24     	; 0x29d4 <LCD_goToRowColumn+0x66>
    29bc:	0e c0       	rjmp	.+28     	; 0x29da <LCD_goToRowColumn+0x6c>
	case 0:
		address=col;
    29be:	8b 81       	ldd	r24, Y+3	; 0x03
    29c0:	89 83       	std	Y+1, r24	; 0x01
    29c2:	0b c0       	rjmp	.+22     	; 0x29da <LCD_goToRowColumn+0x6c>
		break;
	case 1:
		address=col+0x40;
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	80 5c       	subi	r24, 0xC0	; 192
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	07 c0       	rjmp	.+14     	; 0x29da <LCD_goToRowColumn+0x6c>
		break;
	case 2:
		address=col+0x10;
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	80 5f       	subi	r24, 0xF0	; 240
    29d0:	89 83       	std	Y+1, r24	; 0x01
    29d2:	03 c0       	rjmp	.+6      	; 0x29da <LCD_goToRowColumn+0x6c>
		break;
	case 3:
		address=col+0x50;
    29d4:	8b 81       	ldd	r24, Y+3	; 0x03
    29d6:	80 5b       	subi	r24, 0xB0	; 176
    29d8:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(address | 0x80);
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	80 68       	ori	r24, 0x80	; 128
    29de:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <LCD_sendCommand>
}
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <LCD_integerToString>:

void LCD_integerToString(int data)
{
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	62 97       	sbiw	r28, 0x12	; 18
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	f8 94       	cli
    2a00:	de bf       	out	0x3e, r29	; 62
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	cd bf       	out	0x3d, r28	; 61
    2a06:	9a 8b       	std	Y+18, r25	; 0x12
    2a08:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* 10 for decimal */
    2a0a:	89 89       	ldd	r24, Y+17	; 0x11
    2a0c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a0e:	9e 01       	movw	r18, r28
    2a10:	2f 5f       	subi	r18, 0xFF	; 255
    2a12:	3f 4f       	sbci	r19, 0xFF	; 255
    2a14:	b9 01       	movw	r22, r18
    2a16:	4a e0       	ldi	r20, 0x0A	; 10
    2a18:	50 e0       	ldi	r21, 0x00	; 0
    2a1a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <itoa>
	LCD_displayString(buff);
    2a1e:	ce 01       	movw	r24, r28
    2a20:	01 96       	adiw	r24, 0x01	; 1
    2a22:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_displayString>
}
    2a26:	62 96       	adiw	r28, 0x12	; 18
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <LCD_clearScreen>:

void LCD_clearScreen(){
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN);
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <LCD_sendCommand>
}
    2a46:	cf 91       	pop	r28
    2a48:	df 91       	pop	r29
    2a4a:	08 95       	ret

00002a4c <closeBuzzer>:
#include "DIO_int.h"

#include "common_macros.h"

void closeBuzzer(void)
{
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
	static int count=0;
	if(count==4)
    2a54:	80 91 a0 01 	lds	r24, 0x01A0
    2a58:	90 91 a1 01 	lds	r25, 0x01A1
    2a5c:	84 30       	cpi	r24, 0x04	; 4
    2a5e:	91 05       	cpc	r25, r1
    2a60:	59 f4       	brne	.+22     	; 0x2a78 <closeBuzzer+0x2c>
	{
		count=0;
    2a62:	10 92 a1 01 	sts	0x01A1, r1
    2a66:	10 92 a0 01 	sts	0x01A0, r1
		MDIO_voidSetPinValue(PORTD,PIN3,LOW);
    2a6a:	83 e0       	ldi	r24, 0x03	; 3
    2a6c:	63 e0       	ldi	r22, 0x03	; 3
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <MDIO_voidSetPinValue>
		TIMER0_deInit();
    2a74:	0e 94 80 19 	call	0x3300	; 0x3300 <TIMER0_deInit>
	}
	count++;
    2a78:	80 91 a0 01 	lds	r24, 0x01A0
    2a7c:	90 91 a1 01 	lds	r25, 0x01A1
    2a80:	01 96       	adiw	r24, 0x01	; 1
    2a82:	90 93 a1 01 	sts	0x01A1, r25
    2a86:	80 93 a0 01 	sts	0x01A0, r24
}
    2a8a:	cf 91       	pop	r28
    2a8c:	df 91       	pop	r29
    2a8e:	08 95       	ret

00002a90 <main>:

int main()
{
    2a90:	0f 93       	push	r16
    2a92:	1f 93       	push	r17
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	cc 54       	subi	r28, 0x4C	; 76
    2a9e:	d0 40       	sbci	r29, 0x00	; 0
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61

	uint32 temp,light;
	uint8 flag=1,failedCount=0;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	8c af       	std	Y+60, r24	; 0x3c
    2aae:	1b ae       	std	Y+59, r1	; 0x3b
	uint8 savedPass[]={1,2,3,4};
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	eb 5b       	subi	r30, 0xBB	; 187
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	80 83       	st	Z, r24
    2aba:	fe 01       	movw	r30, r28
    2abc:	eb 5b       	subi	r30, 0xBB	; 187
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	82 e0       	ldi	r24, 0x02	; 2
    2ac2:	81 83       	std	Z+1, r24	; 0x01
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	eb 5b       	subi	r30, 0xBB	; 187
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	83 e0       	ldi	r24, 0x03	; 3
    2acc:	82 83       	std	Z+2, r24	; 0x02
    2ace:	fe 01       	movw	r30, r28
    2ad0:	eb 5b       	subi	r30, 0xBB	; 187
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	84 e0       	ldi	r24, 0x04	; 4
    2ad6:	83 83       	std	Z+3, r24	; 0x03
	uint8 receivedPass[4];

	/* init pin direction for leds*/
	MDIO_voidSetPinDirection(PORTA,PIN2,HIGH); /*led 1*/
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	62 e0       	ldi	r22, 0x02	; 2
    2adc:	41 e0       	ldi	r20, 0x01	; 1
    2ade:	0e 94 17 07 	call	0xe2e	; 0xe2e <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,PIN3,HIGH);/*led 2*/
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	63 e0       	ldi	r22, 0x03	; 3
    2ae6:	41 e0       	ldi	r20, 0x01	; 1
    2ae8:	0e 94 17 07 	call	0xe2e	; 0xe2e <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,PIN4,HIGH);/*led 3*/
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	64 e0       	ldi	r22, 0x04	; 4
    2af0:	41 e0       	ldi	r20, 0x01	; 1
    2af2:	0e 94 17 07 	call	0xe2e	; 0xe2e <MDIO_voidSetPinDirection>

	/* init pin dir for motor */
	MDIO_voidSetPinDirection(PORTC,PIN0,HIGH);
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	41 e0       	ldi	r20, 0x01	; 1
    2afc:	0e 94 17 07 	call	0xe2e	; 0xe2e <MDIO_voidSetPinDirection>

	/* init pin dir for button */
	MDIO_voidSetPinDirection(PORTC,PIN1,LOW);
    2b00:	82 e0       	ldi	r24, 0x02	; 2
    2b02:	61 e0       	ldi	r22, 0x01	; 1
    2b04:	40 e0       	ldi	r20, 0x00	; 0
    2b06:	0e 94 17 07 	call	0xe2e	; 0xe2e <MDIO_voidSetPinDirection>

	/* init pin dir for servo motor */
	MDIO_voidSetPinDirection(PORTD,PIN5,HIGH);
    2b0a:	83 e0       	ldi	r24, 0x03	; 3
    2b0c:	65 e0       	ldi	r22, 0x05	; 5
    2b0e:	41 e0       	ldi	r20, 0x01	; 1
    2b10:	0e 94 17 07 	call	0xe2e	; 0xe2e <MDIO_voidSetPinDirection>

	/* init pin dir for buzzer */
	MDIO_voidSetPinDirection(PORTD,PIN3,HIGH);
    2b14:	83 e0       	ldi	r24, 0x03	; 3
    2b16:	63 e0       	ldi	r22, 0x03	; 3
    2b18:	41 e0       	ldi	r20, 0x01	; 1
    2b1a:	0e 94 17 07 	call	0xe2e	; 0xe2e <MDIO_voidSetPinDirection>

	ADC_init();
    2b1e:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <ADC_init>
	LCD_init();
    2b22:	0e 94 33 0c 	call	0x1866	; 0x1866 <LCD_init>


	TIMER0_setCallBack(closeBuzzer);
    2b26:	86 e2       	ldi	r24, 0x26	; 38
    2b28:	95 e1       	ldi	r25, 0x15	; 21
    2b2a:	0e 94 6e 19 	call	0x32dc	; 0x32dc <TIMER0_setCallBack>

	LCD_clearScreen();
    2b2e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <LCD_clearScreen>

	while(1)
	{
		LCD_goToRowColumn(0,0);
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	60 e0       	ldi	r22, 0x00	; 0
    2b38:	70 e0       	ldi	r23, 0x00	; 0
    2b3a:	0e 94 b7 14 	call	0x296e	; 0x296e <LCD_goToRowColumn>
		LCD_displayString("Temp = ");
    2b3e:	80 e6       	ldi	r24, 0x60	; 96
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_displayString>
		LCD_goToRowColumn(0,11);
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	6b e0       	ldi	r22, 0x0B	; 11
    2b4c:	70 e0       	ldi	r23, 0x00	; 0
    2b4e:	0e 94 b7 14 	call	0x296e	; 0x296e <LCD_goToRowColumn>
		LCD_displayString("C");
    2b52:	88 e6       	ldi	r24, 0x68	; 104
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_displayString>

		LCD_goToRowColumn(1,0);
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	60 e0       	ldi	r22, 0x00	; 0
    2b60:	70 e0       	ldi	r23, 0x00	; 0
    2b62:	0e 94 b7 14 	call	0x296e	; 0x296e <LCD_goToRowColumn>
		LCD_displayString("light = ");
    2b66:	8a e6       	ldi	r24, 0x6A	; 106
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_displayString>
		//LCD_clearScreen();///////////////////////////////////
		LCD_goToRowColumn(0,7);
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	67 e0       	ldi	r22, 0x07	; 7
    2b74:	70 e0       	ldi	r23, 0x00	; 0
    2b76:	0e 94 b7 14 	call	0x296e	; 0x296e <LCD_goToRowColumn>
		temp=ADC_readChannel(0);
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <ADC_readChannel>
    2b80:	fe 01       	movw	r30, r28
    2b82:	ef 5b       	subi	r30, 0xBF	; 191
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	cc 01       	movw	r24, r24
    2b88:	a0 e0       	ldi	r26, 0x00	; 0
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	80 83       	st	Z, r24
    2b8e:	91 83       	std	Z+1, r25	; 0x01
    2b90:	a2 83       	std	Z+2, r26	; 0x02
    2b92:	b3 83       	std	Z+3, r27	; 0x03
		temp = (temp*150*5)/(1023*1.5);
    2b94:	fe 01       	movw	r30, r28
    2b96:	ef 5b       	subi	r30, 0xBF	; 191
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	80 81       	ld	r24, Z
    2b9c:	91 81       	ldd	r25, Z+1	; 0x01
    2b9e:	a2 81       	ldd	r26, Z+2	; 0x02
    2ba0:	b3 81       	ldd	r27, Z+3	; 0x03
    2ba2:	2e ee       	ldi	r18, 0xEE	; 238
    2ba4:	32 e0       	ldi	r19, 0x02	; 2
    2ba6:	40 e0       	ldi	r20, 0x00	; 0
    2ba8:	50 e0       	ldi	r21, 0x00	; 0
    2baa:	bc 01       	movw	r22, r24
    2bac:	cd 01       	movw	r24, r26
    2bae:	0e 94 9e 19 	call	0x333c	; 0x333c <__mulsi3>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	bc 01       	movw	r22, r24
    2bb8:	cd 01       	movw	r24, r26
    2bba:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	bc 01       	movw	r22, r24
    2bc4:	cd 01       	movw	r24, r26
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 ed       	ldi	r19, 0xD0	; 208
    2bca:	4f eb       	ldi	r20, 0xBF	; 191
    2bcc:	54 e4       	ldi	r21, 0x44	; 68
    2bce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	8e 01       	movw	r16, r28
    2bd8:	0f 5b       	subi	r16, 0xBF	; 191
    2bda:	1f 4f       	sbci	r17, 0xFF	; 255
    2bdc:	bc 01       	movw	r22, r24
    2bde:	cd 01       	movw	r24, r26
    2be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	f8 01       	movw	r30, r16
    2bea:	80 83       	st	Z, r24
    2bec:	91 83       	std	Z+1, r25	; 0x01
    2bee:	a2 83       	std	Z+2, r26	; 0x02
    2bf0:	b3 83       	std	Z+3, r27	; 0x03
		LCD_integerToString(temp);
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	ef 5b       	subi	r30, 0xBF	; 191
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_integerToString>
		light=ADC_readChannel(1);
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <ADC_readChannel>
    2c06:	cc 01       	movw	r24, r24
    2c08:	a0 e0       	ldi	r26, 0x00	; 0
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	fd 96       	adiw	r30, 0x3d	; 61
    2c10:	80 83       	st	Z, r24
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	a2 83       	std	Z+2, r26	; 0x02
    2c16:	b3 83       	std	Z+3, r27	; 0x03
		LCD_goToRowColumn(1,8);
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	68 e0       	ldi	r22, 0x08	; 8
    2c1e:	70 e0       	ldi	r23, 0x00	; 0
    2c20:	0e 94 b7 14 	call	0x296e	; 0x296e <LCD_goToRowColumn>
		LCD_integerToString(light);
    2c24:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c26:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c28:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_integerToString>

		if(BIT_IS_SET(PINC,1))
    2c2c:	e3 e3       	ldi	r30, 0x33	; 51
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	80 81       	ld	r24, Z
    2c32:	88 2f       	mov	r24, r24
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	82 70       	andi	r24, 0x02	; 2
    2c38:	90 70       	andi	r25, 0x00	; 0
    2c3a:	00 97       	sbiw	r24, 0x00	; 0
    2c3c:	09 f4       	brne	.+2      	; 0x2c40 <main+0x1b0>
    2c3e:	72 c2       	rjmp	.+1252   	; 0x3124 <main+0x694>
		{
			flag=1;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	8c af       	std	Y+60, r24	; 0x3c
			failedCount=0;
    2c44:	1b ae       	std	Y+59, r1	; 0x3b
    2c46:	68 c2       	rjmp	.+1232   	; 0x3118 <main+0x688>

			while(flag==1)
			{
				LCD_clearScreen();
    2c48:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <LCD_clearScreen>
				LCD_displayString("enter the pass:");
    2c4c:	83 e7       	ldi	r24, 0x73	; 115
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_displayString>
				LCD_goToRowColumn(1,0);
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	60 e0       	ldi	r22, 0x00	; 0
    2c5a:	70 e0       	ldi	r23, 0x00	; 0
    2c5c:	0e 94 b7 14 	call	0x296e	; 0x296e <LCD_goToRowColumn>
				for(int i=0;i<4;i++)
    2c60:	1a ae       	std	Y+58, r1	; 0x3a
    2c62:	19 ae       	std	Y+57, r1	; 0x39
    2c64:	0d c1       	rjmp	.+538    	; 0x2e80 <main+0x3f0>
				{

					receivedPass[i]=KeyPad_getPressedKey();
    2c66:	09 ad       	ldd	r16, Y+57	; 0x39
    2c68:	1a ad       	ldd	r17, Y+58	; 0x3a
    2c6a:	0e 94 a7 0b 	call	0x174e	; 0x174e <KeyPad_getPressedKey>
    2c6e:	28 2f       	mov	r18, r24
    2c70:	ce 01       	movw	r24, r28
    2c72:	87 5b       	subi	r24, 0xB7	; 183
    2c74:	9f 4f       	sbci	r25, 0xFF	; 255
    2c76:	fc 01       	movw	r30, r24
    2c78:	e0 0f       	add	r30, r16
    2c7a:	f1 1f       	adc	r31, r17
    2c7c:	20 83       	st	Z, r18
					LCD_integerToString(receivedPass[i]);
    2c7e:	29 ad       	ldd	r18, Y+57	; 0x39
    2c80:	3a ad       	ldd	r19, Y+58	; 0x3a
    2c82:	ce 01       	movw	r24, r28
    2c84:	87 5b       	subi	r24, 0xB7	; 183
    2c86:	9f 4f       	sbci	r25, 0xFF	; 255
    2c88:	fc 01       	movw	r30, r24
    2c8a:	e2 0f       	add	r30, r18
    2c8c:	f3 1f       	adc	r31, r19
    2c8e:	80 81       	ld	r24, Z
    2c90:	88 2f       	mov	r24, r24
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_integerToString>
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	a6 e9       	ldi	r26, 0x96	; 150
    2c9e:	b3 e4       	ldi	r27, 0x43	; 67
    2ca0:	8d ab       	std	Y+53, r24	; 0x35
    2ca2:	9e ab       	std	Y+54, r25	; 0x36
    2ca4:	af ab       	std	Y+55, r26	; 0x37
    2ca6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca8:	6d a9       	ldd	r22, Y+53	; 0x35
    2caa:	7e a9       	ldd	r23, Y+54	; 0x36
    2cac:	8f a9       	ldd	r24, Y+55	; 0x37
    2cae:	98 ad       	ldd	r25, Y+56	; 0x38
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	4a e7       	ldi	r20, 0x7A	; 122
    2cb6:	53 e4       	ldi	r21, 0x43	; 67
    2cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	89 ab       	std	Y+49, r24	; 0x31
    2cc2:	9a ab       	std	Y+50, r25	; 0x32
    2cc4:	ab ab       	std	Y+51, r26	; 0x33
    2cc6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cc8:	69 a9       	ldd	r22, Y+49	; 0x31
    2cca:	7a a9       	ldd	r23, Y+50	; 0x32
    2ccc:	8b a9       	ldd	r24, Y+51	; 0x33
    2cce:	9c a9       	ldd	r25, Y+52	; 0x34
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e8       	ldi	r20, 0x80	; 128
    2cd6:	5f e3       	ldi	r21, 0x3F	; 63
    2cd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cdc:	88 23       	and	r24, r24
    2cde:	2c f4       	brge	.+10     	; 0x2cea <main+0x25a>
		__ticks = 1;
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	98 ab       	std	Y+48, r25	; 0x30
    2ce6:	8f a7       	std	Y+47, r24	; 0x2f
    2ce8:	3f c0       	rjmp	.+126    	; 0x2d68 <main+0x2d8>
	else if (__tmp > 65535)
    2cea:	69 a9       	ldd	r22, Y+49	; 0x31
    2cec:	7a a9       	ldd	r23, Y+50	; 0x32
    2cee:	8b a9       	ldd	r24, Y+51	; 0x33
    2cf0:	9c a9       	ldd	r25, Y+52	; 0x34
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	3f ef       	ldi	r19, 0xFF	; 255
    2cf6:	4f e7       	ldi	r20, 0x7F	; 127
    2cf8:	57 e4       	ldi	r21, 0x47	; 71
    2cfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cfe:	18 16       	cp	r1, r24
    2d00:	4c f5       	brge	.+82     	; 0x2d54 <main+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d02:	6d a9       	ldd	r22, Y+53	; 0x35
    2d04:	7e a9       	ldd	r23, Y+54	; 0x36
    2d06:	8f a9       	ldd	r24, Y+55	; 0x37
    2d08:	98 ad       	ldd	r25, Y+56	; 0x38
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	40 e2       	ldi	r20, 0x20	; 32
    2d10:	51 e4       	ldi	r21, 0x41	; 65
    2d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	bc 01       	movw	r22, r24
    2d1c:	cd 01       	movw	r24, r26
    2d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	98 ab       	std	Y+48, r25	; 0x30
    2d28:	8f a7       	std	Y+47, r24	; 0x2f
    2d2a:	0f c0       	rjmp	.+30     	; 0x2d4a <main+0x2ba>
    2d2c:	89 e1       	ldi	r24, 0x19	; 25
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	9e a7       	std	Y+46, r25	; 0x2e
    2d32:	8d a7       	std	Y+45, r24	; 0x2d
    2d34:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d36:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	f1 f7       	brne	.-4      	; 0x2d38 <main+0x2a8>
    2d3c:	9e a7       	std	Y+46, r25	; 0x2e
    2d3e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d40:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d42:	98 a9       	ldd	r25, Y+48	; 0x30
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	98 ab       	std	Y+48, r25	; 0x30
    2d48:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d4c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d4e:	00 97       	sbiw	r24, 0x00	; 0
    2d50:	69 f7       	brne	.-38     	; 0x2d2c <main+0x29c>
    2d52:	14 c0       	rjmp	.+40     	; 0x2d7c <main+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d54:	69 a9       	ldd	r22, Y+49	; 0x31
    2d56:	7a a9       	ldd	r23, Y+50	; 0x32
    2d58:	8b a9       	ldd	r24, Y+51	; 0x33
    2d5a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	98 ab       	std	Y+48, r25	; 0x30
    2d66:	8f a7       	std	Y+47, r24	; 0x2f
    2d68:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d6a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d6c:	9c a7       	std	Y+44, r25	; 0x2c
    2d6e:	8b a7       	std	Y+43, r24	; 0x2b
    2d70:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d72:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <main+0x2e4>
    2d78:	9c a7       	std	Y+44, r25	; 0x2c
    2d7a:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(300);
					LCD_goToRowColumn(1,i);
    2d7c:	29 ad       	ldd	r18, Y+57	; 0x39
    2d7e:	3a ad       	ldd	r19, Y+58	; 0x3a
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	b9 01       	movw	r22, r18
    2d86:	0e 94 b7 14 	call	0x296e	; 0x296e <LCD_goToRowColumn>
					LCD_displayString("*");
    2d8a:	83 e8       	ldi	r24, 0x83	; 131
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_displayString>
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	aa ef       	ldi	r26, 0xFA	; 250
    2d98:	b3 e4       	ldi	r27, 0x43	; 67
    2d9a:	8f a3       	std	Y+39, r24	; 0x27
    2d9c:	98 a7       	std	Y+40, r25	; 0x28
    2d9e:	a9 a7       	std	Y+41, r26	; 0x29
    2da0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da2:	6f a1       	ldd	r22, Y+39	; 0x27
    2da4:	78 a5       	ldd	r23, Y+40	; 0x28
    2da6:	89 a5       	ldd	r24, Y+41	; 0x29
    2da8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	4a e7       	ldi	r20, 0x7A	; 122
    2db0:	53 e4       	ldi	r21, 0x43	; 67
    2db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	8b a3       	std	Y+35, r24	; 0x23
    2dbc:	9c a3       	std	Y+36, r25	; 0x24
    2dbe:	ad a3       	std	Y+37, r26	; 0x25
    2dc0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2dc2:	6b a1       	ldd	r22, Y+35	; 0x23
    2dc4:	7c a1       	ldd	r23, Y+36	; 0x24
    2dc6:	8d a1       	ldd	r24, Y+37	; 0x25
    2dc8:	9e a1       	ldd	r25, Y+38	; 0x26
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e8       	ldi	r20, 0x80	; 128
    2dd0:	5f e3       	ldi	r21, 0x3F	; 63
    2dd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dd6:	88 23       	and	r24, r24
    2dd8:	2c f4       	brge	.+10     	; 0x2de4 <main+0x354>
		__ticks = 1;
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	9a a3       	std	Y+34, r25	; 0x22
    2de0:	89 a3       	std	Y+33, r24	; 0x21
    2de2:	3f c0       	rjmp	.+126    	; 0x2e62 <main+0x3d2>
	else if (__tmp > 65535)
    2de4:	6b a1       	ldd	r22, Y+35	; 0x23
    2de6:	7c a1       	ldd	r23, Y+36	; 0x24
    2de8:	8d a1       	ldd	r24, Y+37	; 0x25
    2dea:	9e a1       	ldd	r25, Y+38	; 0x26
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	3f ef       	ldi	r19, 0xFF	; 255
    2df0:	4f e7       	ldi	r20, 0x7F	; 127
    2df2:	57 e4       	ldi	r21, 0x47	; 71
    2df4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2df8:	18 16       	cp	r1, r24
    2dfa:	4c f5       	brge	.+82     	; 0x2e4e <main+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfc:	6f a1       	ldd	r22, Y+39	; 0x27
    2dfe:	78 a5       	ldd	r23, Y+40	; 0x28
    2e00:	89 a5       	ldd	r24, Y+41	; 0x29
    2e02:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	40 e2       	ldi	r20, 0x20	; 32
    2e0a:	51 e4       	ldi	r21, 0x41	; 65
    2e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	9a a3       	std	Y+34, r25	; 0x22
    2e22:	89 a3       	std	Y+33, r24	; 0x21
    2e24:	0f c0       	rjmp	.+30     	; 0x2e44 <main+0x3b4>
    2e26:	89 e1       	ldi	r24, 0x19	; 25
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	98 a3       	std	Y+32, r25	; 0x20
    2e2c:	8f 8f       	std	Y+31, r24	; 0x1f
    2e2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e30:	98 a1       	ldd	r25, Y+32	; 0x20
    2e32:	01 97       	sbiw	r24, 0x01	; 1
    2e34:	f1 f7       	brne	.-4      	; 0x2e32 <main+0x3a2>
    2e36:	98 a3       	std	Y+32, r25	; 0x20
    2e38:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e3c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	9a a3       	std	Y+34, r25	; 0x22
    2e42:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e44:	89 a1       	ldd	r24, Y+33	; 0x21
    2e46:	9a a1       	ldd	r25, Y+34	; 0x22
    2e48:	00 97       	sbiw	r24, 0x00	; 0
    2e4a:	69 f7       	brne	.-38     	; 0x2e26 <main+0x396>
    2e4c:	14 c0       	rjmp	.+40     	; 0x2e76 <main+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e50:	7c a1       	ldd	r23, Y+36	; 0x24
    2e52:	8d a1       	ldd	r24, Y+37	; 0x25
    2e54:	9e a1       	ldd	r25, Y+38	; 0x26
    2e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	9a a3       	std	Y+34, r25	; 0x22
    2e60:	89 a3       	std	Y+33, r24	; 0x21
    2e62:	89 a1       	ldd	r24, Y+33	; 0x21
    2e64:	9a a1       	ldd	r25, Y+34	; 0x22
    2e66:	9e 8f       	std	Y+30, r25	; 0x1e
    2e68:	8d 8f       	std	Y+29, r24	; 0x1d
    2e6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	f1 f7       	brne	.-4      	; 0x2e6e <main+0x3de>
    2e72:	9e 8f       	std	Y+30, r25	; 0x1e
    2e74:	8d 8f       	std	Y+29, r24	; 0x1d
			while(flag==1)
			{
				LCD_clearScreen();
				LCD_displayString("enter the pass:");
				LCD_goToRowColumn(1,0);
				for(int i=0;i<4;i++)
    2e76:	89 ad       	ldd	r24, Y+57	; 0x39
    2e78:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e7a:	01 96       	adiw	r24, 0x01	; 1
    2e7c:	9a af       	std	Y+58, r25	; 0x3a
    2e7e:	89 af       	std	Y+57, r24	; 0x39
    2e80:	89 ad       	ldd	r24, Y+57	; 0x39
    2e82:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e84:	84 30       	cpi	r24, 0x04	; 4
    2e86:	91 05       	cpc	r25, r1
    2e88:	0c f4       	brge	.+2      	; 0x2e8c <main+0x3fc>
    2e8a:	ed ce       	rjmp	.-550    	; 0x2c66 <main+0x1d6>
					_delay_ms(300);
					LCD_goToRowColumn(1,i);
					LCD_displayString("*");
					_delay_ms(500);
				}
				if(receivedPass[0]==savedPass[0] && receivedPass[1]==savedPass[1] && receivedPass[2]==savedPass[2] && receivedPass[3]==savedPass[3])
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e7 5b       	subi	r30, 0xB7	; 183
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	90 81       	ld	r25, Z
    2e94:	fe 01       	movw	r30, r28
    2e96:	eb 5b       	subi	r30, 0xBB	; 187
    2e98:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9a:	80 81       	ld	r24, Z
    2e9c:	98 17       	cp	r25, r24
    2e9e:	09 f0       	breq	.+2      	; 0x2ea2 <main+0x412>
    2ea0:	9f c0       	rjmp	.+318    	; 0x2fe0 <main+0x550>
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e7 5b       	subi	r30, 0xB7	; 183
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	91 81       	ldd	r25, Z+1	; 0x01
    2eaa:	fe 01       	movw	r30, r28
    2eac:	eb 5b       	subi	r30, 0xBB	; 187
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	81 81       	ldd	r24, Z+1	; 0x01
    2eb2:	98 17       	cp	r25, r24
    2eb4:	09 f0       	breq	.+2      	; 0x2eb8 <main+0x428>
    2eb6:	94 c0       	rjmp	.+296    	; 0x2fe0 <main+0x550>
    2eb8:	fe 01       	movw	r30, r28
    2eba:	e7 5b       	subi	r30, 0xB7	; 183
    2ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebe:	92 81       	ldd	r25, Z+2	; 0x02
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	eb 5b       	subi	r30, 0xBB	; 187
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	82 81       	ldd	r24, Z+2	; 0x02
    2ec8:	98 17       	cp	r25, r24
    2eca:	09 f0       	breq	.+2      	; 0x2ece <main+0x43e>
    2ecc:	89 c0       	rjmp	.+274    	; 0x2fe0 <main+0x550>
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e7 5b       	subi	r30, 0xB7	; 183
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	93 81       	ldd	r25, Z+3	; 0x03
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	eb 5b       	subi	r30, 0xBB	; 187
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	83 81       	ldd	r24, Z+3	; 0x03
    2ede:	98 17       	cp	r25, r24
    2ee0:	09 f0       	breq	.+2      	; 0x2ee4 <main+0x454>
    2ee2:	7e c0       	rjmp	.+252    	; 0x2fe0 <main+0x550>
				{
					flag=0;
    2ee4:	1c ae       	std	Y+60, r1	; 0x3c
					Timer1_Fast_PWM_Init(250);	/* Set Servo shaft at 90° position by 1.5 ms pulse */
    2ee6:	8a ef       	ldi	r24, 0xFA	; 250
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <Timer1_Fast_PWM_Init>
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	90 e8       	ldi	r25, 0x80	; 128
    2ef2:	ab eb       	ldi	r26, 0xBB	; 187
    2ef4:	b4 e4       	ldi	r27, 0x44	; 68
    2ef6:	89 8f       	std	Y+25, r24	; 0x19
    2ef8:	9a 8f       	std	Y+26, r25	; 0x1a
    2efa:	ab 8f       	std	Y+27, r26	; 0x1b
    2efc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2efe:	69 8d       	ldd	r22, Y+25	; 0x19
    2f00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	4a e7       	ldi	r20, 0x7A	; 122
    2f0c:	53 e4       	ldi	r21, 0x43	; 67
    2f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	8d 8b       	std	Y+21, r24	; 0x15
    2f18:	9e 8b       	std	Y+22, r25	; 0x16
    2f1a:	af 8b       	std	Y+23, r26	; 0x17
    2f1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f20:	7e 89       	ldd	r23, Y+22	; 0x16
    2f22:	8f 89       	ldd	r24, Y+23	; 0x17
    2f24:	98 8d       	ldd	r25, Y+24	; 0x18
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	40 e8       	ldi	r20, 0x80	; 128
    2f2c:	5f e3       	ldi	r21, 0x3F	; 63
    2f2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f32:	88 23       	and	r24, r24
    2f34:	2c f4       	brge	.+10     	; 0x2f40 <main+0x4b0>
		__ticks = 1;
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	9c 8b       	std	Y+20, r25	; 0x14
    2f3c:	8b 8b       	std	Y+19, r24	; 0x13
    2f3e:	3f c0       	rjmp	.+126    	; 0x2fbe <main+0x52e>
	else if (__tmp > 65535)
    2f40:	6d 89       	ldd	r22, Y+21	; 0x15
    2f42:	7e 89       	ldd	r23, Y+22	; 0x16
    2f44:	8f 89       	ldd	r24, Y+23	; 0x17
    2f46:	98 8d       	ldd	r25, Y+24	; 0x18
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	3f ef       	ldi	r19, 0xFF	; 255
    2f4c:	4f e7       	ldi	r20, 0x7F	; 127
    2f4e:	57 e4       	ldi	r21, 0x47	; 71
    2f50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f54:	18 16       	cp	r1, r24
    2f56:	4c f5       	brge	.+82     	; 0x2faa <main+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f58:	69 8d       	ldd	r22, Y+25	; 0x19
    2f5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	40 e2       	ldi	r20, 0x20	; 32
    2f66:	51 e4       	ldi	r21, 0x41	; 65
    2f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	bc 01       	movw	r22, r24
    2f72:	cd 01       	movw	r24, r26
    2f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	9c 8b       	std	Y+20, r25	; 0x14
    2f7e:	8b 8b       	std	Y+19, r24	; 0x13
    2f80:	0f c0       	rjmp	.+30     	; 0x2fa0 <main+0x510>
    2f82:	89 e1       	ldi	r24, 0x19	; 25
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	9a 8b       	std	Y+18, r25	; 0x12
    2f88:	89 8b       	std	Y+17, r24	; 0x11
    2f8a:	89 89       	ldd	r24, Y+17	; 0x11
    2f8c:	9a 89       	ldd	r25, Y+18	; 0x12
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	f1 f7       	brne	.-4      	; 0x2f8e <main+0x4fe>
    2f92:	9a 8b       	std	Y+18, r25	; 0x12
    2f94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f96:	8b 89       	ldd	r24, Y+19	; 0x13
    2f98:	9c 89       	ldd	r25, Y+20	; 0x14
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	9c 8b       	std	Y+20, r25	; 0x14
    2f9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fa2:	9c 89       	ldd	r25, Y+20	; 0x14
    2fa4:	00 97       	sbiw	r24, 0x00	; 0
    2fa6:	69 f7       	brne	.-38     	; 0x2f82 <main+0x4f2>
    2fa8:	14 c0       	rjmp	.+40     	; 0x2fd2 <main+0x542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2faa:	6d 89       	ldd	r22, Y+21	; 0x15
    2fac:	7e 89       	ldd	r23, Y+22	; 0x16
    2fae:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	9c 8b       	std	Y+20, r25	; 0x14
    2fbc:	8b 8b       	std	Y+19, r24	; 0x13
    2fbe:	8b 89       	ldd	r24, Y+19	; 0x13
    2fc0:	9c 89       	ldd	r25, Y+20	; 0x14
    2fc2:	98 8b       	std	Y+16, r25	; 0x10
    2fc4:	8f 87       	std	Y+15, r24	; 0x0f
    2fc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fc8:	98 89       	ldd	r25, Y+16	; 0x10
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	f1 f7       	brne	.-4      	; 0x2fca <main+0x53a>
    2fce:	98 8b       	std	Y+16, r25	; 0x10
    2fd0:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1500);
					Timer1_Fast_PWM_Init(187);	/* Set Servo shaft at 0° position by 1 ms pulse */
    2fd2:	8b eb       	ldi	r24, 0xBB	; 187
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <Timer1_Fast_PWM_Init>
					LCD_clearScreen();
    2fda:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <LCD_clearScreen>
    2fde:	9c c0       	rjmp	.+312    	; 0x3118 <main+0x688>
				}
				else
				{
					failedCount++;
    2fe0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fe2:	8f 5f       	subi	r24, 0xFF	; 255
    2fe4:	8b af       	std	Y+59, r24	; 0x3b
					LCD_clearScreen();
    2fe6:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <LCD_clearScreen>
					LCD_displayString("wrong pass ");
    2fea:	85 e8       	ldi	r24, 0x85	; 133
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_displayString>
					LCD_goToRowColumn(1,0);
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	60 e0       	ldi	r22, 0x00	; 0
    2ff8:	70 e0       	ldi	r23, 0x00	; 0
    2ffa:	0e 94 b7 14 	call	0x296e	; 0x296e <LCD_goToRowColumn>
					LCD_displayString("trial ");
    2ffe:	81 e9       	ldi	r24, 0x91	; 145
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_displayString>
					LCD_goToRowColumn(1,7);
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	67 e0       	ldi	r22, 0x07	; 7
    300c:	70 e0       	ldi	r23, 0x00	; 0
    300e:	0e 94 b7 14 	call	0x296e	; 0x296e <LCD_goToRowColumn>
					LCD_integerToString(failedCount);
    3012:	8b ad       	ldd	r24, Y+59	; 0x3b
    3014:	88 2f       	mov	r24, r24
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LCD_integerToString>
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	a6 e9       	ldi	r26, 0x96	; 150
    3022:	b3 e4       	ldi	r27, 0x43	; 67
    3024:	8b 87       	std	Y+11, r24	; 0x0b
    3026:	9c 87       	std	Y+12, r25	; 0x0c
    3028:	ad 87       	std	Y+13, r26	; 0x0d
    302a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    302c:	6b 85       	ldd	r22, Y+11	; 0x0b
    302e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3030:	8d 85       	ldd	r24, Y+13	; 0x0d
    3032:	9e 85       	ldd	r25, Y+14	; 0x0e
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	4a e7       	ldi	r20, 0x7A	; 122
    303a:	53 e4       	ldi	r21, 0x43	; 67
    303c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	8f 83       	std	Y+7, r24	; 0x07
    3046:	98 87       	std	Y+8, r25	; 0x08
    3048:	a9 87       	std	Y+9, r26	; 0x09
    304a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    304c:	6f 81       	ldd	r22, Y+7	; 0x07
    304e:	78 85       	ldd	r23, Y+8	; 0x08
    3050:	89 85       	ldd	r24, Y+9	; 0x09
    3052:	9a 85       	ldd	r25, Y+10	; 0x0a
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	40 e8       	ldi	r20, 0x80	; 128
    305a:	5f e3       	ldi	r21, 0x3F	; 63
    305c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3060:	88 23       	and	r24, r24
    3062:	2c f4       	brge	.+10     	; 0x306e <main+0x5de>
		__ticks = 1;
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	9e 83       	std	Y+6, r25	; 0x06
    306a:	8d 83       	std	Y+5, r24	; 0x05
    306c:	3f c0       	rjmp	.+126    	; 0x30ec <main+0x65c>
	else if (__tmp > 65535)
    306e:	6f 81       	ldd	r22, Y+7	; 0x07
    3070:	78 85       	ldd	r23, Y+8	; 0x08
    3072:	89 85       	ldd	r24, Y+9	; 0x09
    3074:	9a 85       	ldd	r25, Y+10	; 0x0a
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	3f ef       	ldi	r19, 0xFF	; 255
    307a:	4f e7       	ldi	r20, 0x7F	; 127
    307c:	57 e4       	ldi	r21, 0x47	; 71
    307e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3082:	18 16       	cp	r1, r24
    3084:	4c f5       	brge	.+82     	; 0x30d8 <main+0x648>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3086:	6b 85       	ldd	r22, Y+11	; 0x0b
    3088:	7c 85       	ldd	r23, Y+12	; 0x0c
    308a:	8d 85       	ldd	r24, Y+13	; 0x0d
    308c:	9e 85       	ldd	r25, Y+14	; 0x0e
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	40 e2       	ldi	r20, 0x20	; 32
    3094:	51 e4       	ldi	r21, 0x41	; 65
    3096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	bc 01       	movw	r22, r24
    30a0:	cd 01       	movw	r24, r26
    30a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	9e 83       	std	Y+6, r25	; 0x06
    30ac:	8d 83       	std	Y+5, r24	; 0x05
    30ae:	0f c0       	rjmp	.+30     	; 0x30ce <main+0x63e>
    30b0:	89 e1       	ldi	r24, 0x19	; 25
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	9c 83       	std	Y+4, r25	; 0x04
    30b6:	8b 83       	std	Y+3, r24	; 0x03
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	9c 81       	ldd	r25, Y+4	; 0x04
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	f1 f7       	brne	.-4      	; 0x30bc <main+0x62c>
    30c0:	9c 83       	std	Y+4, r25	; 0x04
    30c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c4:	8d 81       	ldd	r24, Y+5	; 0x05
    30c6:	9e 81       	ldd	r25, Y+6	; 0x06
    30c8:	01 97       	sbiw	r24, 0x01	; 1
    30ca:	9e 83       	std	Y+6, r25	; 0x06
    30cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ce:	8d 81       	ldd	r24, Y+5	; 0x05
    30d0:	9e 81       	ldd	r25, Y+6	; 0x06
    30d2:	00 97       	sbiw	r24, 0x00	; 0
    30d4:	69 f7       	brne	.-38     	; 0x30b0 <main+0x620>
    30d6:	14 c0       	rjmp	.+40     	; 0x3100 <main+0x670>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d8:	6f 81       	ldd	r22, Y+7	; 0x07
    30da:	78 85       	ldd	r23, Y+8	; 0x08
    30dc:	89 85       	ldd	r24, Y+9	; 0x09
    30de:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	9e 83       	std	Y+6, r25	; 0x06
    30ea:	8d 83       	std	Y+5, r24	; 0x05
    30ec:	8d 81       	ldd	r24, Y+5	; 0x05
    30ee:	9e 81       	ldd	r25, Y+6	; 0x06
    30f0:	9a 83       	std	Y+2, r25	; 0x02
    30f2:	89 83       	std	Y+1, r24	; 0x01
    30f4:	89 81       	ldd	r24, Y+1	; 0x01
    30f6:	9a 81       	ldd	r25, Y+2	; 0x02
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	f1 f7       	brne	.-4      	; 0x30f8 <main+0x668>
    30fc:	9a 83       	std	Y+2, r25	; 0x02
    30fe:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(300);

					if(failedCount>2)
    3100:	8b ad       	ldd	r24, Y+59	; 0x3b
    3102:	83 30       	cpi	r24, 0x03	; 3
    3104:	48 f0       	brcs	.+18     	; 0x3118 <main+0x688>
					{
						flag=0;
    3106:	1c ae       	std	Y+60, r1	; 0x3c
						/* start timer */
						timer0_init_CTC_mode(250);
    3108:	8a ef       	ldi	r24, 0xFA	; 250
    310a:	0e 94 4b 19 	call	0x3296	; 0x3296 <timer0_init_CTC_mode>
						/* turn on buzzer */
						MDIO_voidSetPinValue(PORTD,PIN3,HIGH);
    310e:	83 e0       	ldi	r24, 0x03	; 3
    3110:	63 e0       	ldi	r22, 0x03	; 3
    3112:	41 e0       	ldi	r20, 0x01	; 1
    3114:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <MDIO_voidSetPinValue>
		if(BIT_IS_SET(PINC,1))
		{
			flag=1;
			failedCount=0;

			while(flag==1)
    3118:	8c ad       	ldd	r24, Y+60	; 0x3c
    311a:	81 30       	cpi	r24, 0x01	; 1
    311c:	09 f4       	brne	.+2      	; 0x3120 <main+0x690>
    311e:	94 cd       	rjmp	.-1240   	; 0x2c48 <main+0x1b8>
						/* turn on buzzer */
						MDIO_voidSetPinValue(PORTD,PIN3,HIGH);
					}
				}
			}
			LCD_clearScreen();
    3120:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <LCD_clearScreen>
		}

		//_delay_ms(100); /test on hardware/
		if(temp >=30 )
    3124:	fe 01       	movw	r30, r28
    3126:	ef 5b       	subi	r30, 0xBF	; 191
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	80 81       	ld	r24, Z
    312c:	91 81       	ldd	r25, Z+1	; 0x01
    312e:	a2 81       	ldd	r26, Z+2	; 0x02
    3130:	b3 81       	ldd	r27, Z+3	; 0x03
    3132:	8e 31       	cpi	r24, 0x1E	; 30
    3134:	91 05       	cpc	r25, r1
    3136:	a1 05       	cpc	r26, r1
    3138:	b1 05       	cpc	r27, r1
    313a:	30 f0       	brcs	.+12     	; 0x3148 <main+0x6b8>
		{
			/* turn on motor */
			MDIO_voidSetPinValue(PORTC,PIN0,HIGH);
    313c:	82 e0       	ldi	r24, 0x02	; 2
    313e:	60 e0       	ldi	r22, 0x00	; 0
    3140:	41 e0       	ldi	r20, 0x01	; 1
    3142:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <MDIO_voidSetPinValue>
    3146:	05 c0       	rjmp	.+10     	; 0x3152 <main+0x6c2>
		}
		else
		{
			/* turn off motor */
			MDIO_voidSetPinValue(PORTC,PIN0,LOW);
    3148:	82 e0       	ldi	r24, 0x02	; 2
    314a:	60 e0       	ldi	r22, 0x00	; 0
    314c:	40 e0       	ldi	r20, 0x00	; 0
    314e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <MDIO_voidSetPinValue>
		}

		if(light >=0 && light <300 )
    3152:	fe 01       	movw	r30, r28
    3154:	fd 96       	adiw	r30, 0x3d	; 61
    3156:	80 81       	ld	r24, Z
    3158:	91 81       	ldd	r25, Z+1	; 0x01
    315a:	a2 81       	ldd	r26, Z+2	; 0x02
    315c:	b3 81       	ldd	r27, Z+3	; 0x03
    315e:	8c 32       	cpi	r24, 0x2C	; 44
    3160:	f1 e0       	ldi	r31, 0x01	; 1
    3162:	9f 07       	cpc	r25, r31
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	af 07       	cpc	r26, r31
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	bf 07       	cpc	r27, r31
    316c:	80 f4       	brcc	.+32     	; 0x318e <main+0x6fe>
		{
			/* turn on led1 */
			MDIO_voidSetPinValue(PORTA,PIN2,HIGH);
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	62 e0       	ldi	r22, 0x02	; 2
    3172:	41 e0       	ldi	r20, 0x01	; 1
    3174:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(PORTA,PIN3,HIGH);
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	63 e0       	ldi	r22, 0x03	; 3
    317c:	41 e0       	ldi	r20, 0x01	; 1
    317e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(PORTA,PIN4,HIGH);
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	64 e0       	ldi	r22, 0x04	; 4
    3186:	41 e0       	ldi	r20, 0x01	; 1
    3188:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <MDIO_voidSetPinValue>
    318c:	d2 cc       	rjmp	.-1628   	; 0x2b32 <main+0xa2>
		}
		else if ( light >=300 && light <600)
    318e:	fe 01       	movw	r30, r28
    3190:	fd 96       	adiw	r30, 0x3d	; 61
    3192:	80 81       	ld	r24, Z
    3194:	91 81       	ldd	r25, Z+1	; 0x01
    3196:	a2 81       	ldd	r26, Z+2	; 0x02
    3198:	b3 81       	ldd	r27, Z+3	; 0x03
    319a:	8c 32       	cpi	r24, 0x2C	; 44
    319c:	21 e0       	ldi	r18, 0x01	; 1
    319e:	92 07       	cpc	r25, r18
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	a2 07       	cpc	r26, r18
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	b2 07       	cpc	r27, r18
    31a8:	a0 f0       	brcs	.+40     	; 0x31d2 <main+0x742>
    31aa:	fe 01       	movw	r30, r28
    31ac:	fd 96       	adiw	r30, 0x3d	; 61
    31ae:	80 81       	ld	r24, Z
    31b0:	91 81       	ldd	r25, Z+1	; 0x01
    31b2:	a2 81       	ldd	r26, Z+2	; 0x02
    31b4:	b3 81       	ldd	r27, Z+3	; 0x03
    31b6:	88 35       	cpi	r24, 0x58	; 88
    31b8:	e2 e0       	ldi	r30, 0x02	; 2
    31ba:	9e 07       	cpc	r25, r30
    31bc:	e0 e0       	ldi	r30, 0x00	; 0
    31be:	ae 07       	cpc	r26, r30
    31c0:	e0 e0       	ldi	r30, 0x00	; 0
    31c2:	be 07       	cpc	r27, r30
    31c4:	30 f4       	brcc	.+12     	; 0x31d2 <main+0x742>
		{
			/* turn on led2 */
			MDIO_voidSetPinValue(PORTA,PIN4,LOW);
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	64 e0       	ldi	r22, 0x04	; 4
    31ca:	40 e0       	ldi	r20, 0x00	; 0
    31cc:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <MDIO_voidSetPinValue>
    31d0:	b0 cc       	rjmp	.-1696   	; 0x2b32 <main+0xa2>
		}
		else
		{
			/* turn on led3 */
			MDIO_voidSetPinValue(PORTA,PIN3,LOW);
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	63 e0       	ldi	r22, 0x03	; 3
    31d6:	40 e0       	ldi	r20, 0x00	; 0
    31d8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <MDIO_voidSetPinValue>
			MDIO_voidSetPinValue(PORTA,PIN4,LOW);
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	64 e0       	ldi	r22, 0x04	; 4
    31e0:	40 e0       	ldi	r20, 0x00	; 0
    31e2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <MDIO_voidSetPinValue>
    31e6:	a5 cc       	rjmp	.-1718   	; 0x2b32 <main+0xa2>

000031e8 <Timer1_Fast_PWM_Init>:
#include <avr/io.h>		/* Include AVR std. library file */
#include <util/delay.h>	/* Include Delay header file */
#include "servo.h"

void Timer1_Fast_PWM_Init(unsigned short duty_cycle)
{
    31e8:	df 93       	push	r29
    31ea:	cf 93       	push	r28
    31ec:	00 d0       	rcall	.+0      	; 0x31ee <Timer1_Fast_PWM_Init+0x6>
    31ee:	cd b7       	in	r28, 0x3d	; 61
    31f0:	de b7       	in	r29, 0x3e	; 62
    31f2:	9a 83       	std	Y+2, r25	; 0x02
    31f4:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = 0;		/* Set timer1 initial count to zero */
    31f6:	ec e4       	ldi	r30, 0x4C	; 76
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	11 82       	std	Z+1, r1	; 0x01
    31fc:	10 82       	st	Z, r1
	ICR1 = 2499;	/* Set TOP count for timer1 in ICR1 register */
    31fe:	e6 e4       	ldi	r30, 0x46	; 70
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	83 ec       	ldi	r24, 0xC3	; 195
    3204:	99 e0       	ldi	r25, 0x09	; 9
    3206:	91 83       	std	Z+1, r25	; 0x01
    3208:	80 83       	st	Z, r24

	OCR1A = duty_cycle; /* Set the compare value */
    320a:	ea e4       	ldi	r30, 0x4A	; 74
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	9a 81       	ldd	r25, Y+2	; 0x02
    3212:	91 83       	std	Z+1, r25	; 0x01
    3214:	80 83       	st	Z, r24
     * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
     * 2. Disconnect OC1B  COM1B0=0 COM1B1=0
     * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
     * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
	 */
	TCCR1A = (1<<WGM11) | (1<<COM1A1);
    3216:	ef e4       	ldi	r30, 0x4F	; 79
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	82 e8       	ldi	r24, 0x82	; 130
    321c:	80 83       	st	Z, r24

	/* Configure timer control register TCCR1A
	 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
	 * 2. Prescaler = F_CPU/64
     */
	TCCR1B = (1<<WGM12) | (1<<WGM13) | /*(1<<CS10)| */ (1<<CS11);
    321e:	ee e4       	ldi	r30, 0x4E	; 78
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	8a e1       	ldi	r24, 0x1A	; 26
    3224:	80 83       	st	Z, r24
}
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	cf 91       	pop	r28
    322c:	df 91       	pop	r29
    322e:	08 95       	ret

00003230 <__vector_19>:
static volatile void (*g_callBack)(void)=NULL;


/* Interrupt Service Routine for timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
    3230:	1f 92       	push	r1
    3232:	0f 92       	push	r0
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	0f 92       	push	r0
    3238:	11 24       	eor	r1, r1
    323a:	2f 93       	push	r18
    323c:	3f 93       	push	r19
    323e:	4f 93       	push	r20
    3240:	5f 93       	push	r21
    3242:	6f 93       	push	r22
    3244:	7f 93       	push	r23
    3246:	8f 93       	push	r24
    3248:	9f 93       	push	r25
    324a:	af 93       	push	r26
    324c:	bf 93       	push	r27
    324e:	ef 93       	push	r30
    3250:	ff 93       	push	r31
    3252:	df 93       	push	r29
    3254:	cf 93       	push	r28
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack!=NULL)
    325a:	80 91 a2 01 	lds	r24, 0x01A2
    325e:	90 91 a3 01 	lds	r25, 0x01A3
    3262:	00 97       	sbiw	r24, 0x00	; 0
    3264:	29 f0       	breq	.+10     	; 0x3270 <__vector_19+0x40>
	{
		(*g_callBack)();
    3266:	e0 91 a2 01 	lds	r30, 0x01A2
    326a:	f0 91 a3 01 	lds	r31, 0x01A3
    326e:	09 95       	icall
	}
}
    3270:	cf 91       	pop	r28
    3272:	df 91       	pop	r29
    3274:	ff 91       	pop	r31
    3276:	ef 91       	pop	r30
    3278:	bf 91       	pop	r27
    327a:	af 91       	pop	r26
    327c:	9f 91       	pop	r25
    327e:	8f 91       	pop	r24
    3280:	7f 91       	pop	r23
    3282:	6f 91       	pop	r22
    3284:	5f 91       	pop	r21
    3286:	4f 91       	pop	r20
    3288:	3f 91       	pop	r19
    328a:	2f 91       	pop	r18
    328c:	0f 90       	pop	r0
    328e:	0f be       	out	0x3f, r0	; 63
    3290:	0f 90       	pop	r0
    3292:	1f 90       	pop	r1
    3294:	18 95       	reti

00003296 <timer0_init_CTC_mode>:
 * and output compare register=250 0 --> 250 (250ms per overflow)
 * so we need timer to overflow 2 times to get a 0.5 second 
 */

void timer0_init_CTC_mode(unsigned char tick)
{
    3296:	df 93       	push	r29
    3298:	cf 93       	push	r28
    329a:	0f 92       	push	r0
    329c:	cd b7       	in	r28, 0x3d	; 61
    329e:	de b7       	in	r29, 0x3e	; 62
    32a0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; //timer initial value
    32a2:	e2 e5       	ldi	r30, 0x52	; 82
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	10 82       	st	Z, r1
	OCR0  = tick; //compare value
    32a8:	ec e5       	ldi	r30, 0x5C	; 92
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	89 81       	ldd	r24, Y+1	; 0x01
    32ae:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE0); //enable compare interrupt
    32b0:	a9 e5       	ldi	r26, 0x59	; 89
    32b2:	b0 e0       	ldi	r27, 0x00	; 0
    32b4:	e9 e5       	ldi	r30, 0x59	; 89
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	80 81       	ld	r24, Z
    32ba:	82 60       	ori	r24, 0x02	; 2
    32bc:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 in this example so COM00=0 & COM01=0 
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<CS02) | (1<<CS00);
    32be:	e3 e5       	ldi	r30, 0x53	; 83
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	8d e8       	ldi	r24, 0x8D	; 141
    32c4:	80 83       	st	Z, r24

	/* global interrupt enable */
	SET_BIT(SREG,7);
    32c6:	af e5       	ldi	r26, 0x5F	; 95
    32c8:	b0 e0       	ldi	r27, 0x00	; 0
    32ca:	ef e5       	ldi	r30, 0x5F	; 95
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	80 81       	ld	r24, Z
    32d0:	80 68       	ori	r24, 0x80	; 128
    32d2:	8c 93       	st	X, r24
}
    32d4:	0f 90       	pop	r0
    32d6:	cf 91       	pop	r28
    32d8:	df 91       	pop	r29
    32da:	08 95       	ret

000032dc <TIMER0_setCallBack>:

void TIMER0_setCallBack(void (*a_ptr)(void))
{
    32dc:	df 93       	push	r29
    32de:	cf 93       	push	r28
    32e0:	00 d0       	rcall	.+0      	; 0x32e2 <TIMER0_setCallBack+0x6>
    32e2:	cd b7       	in	r28, 0x3d	; 61
    32e4:	de b7       	in	r29, 0x3e	; 62
    32e6:	9a 83       	std	Y+2, r25	; 0x02
    32e8:	89 83       	std	Y+1, r24	; 0x01
	g_callBack=a_ptr;
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	9a 81       	ldd	r25, Y+2	; 0x02
    32ee:	90 93 a3 01 	sts	0x01A3, r25
    32f2:	80 93 a2 01 	sts	0x01A2, r24
}
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	08 95       	ret

00003300 <TIMER0_deInit>:

void TIMER0_deInit(void)
{
    3300:	df 93       	push	r29
    3302:	cf 93       	push	r28
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    3308:	e3 e5       	ldi	r30, 0x53	; 83
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	10 82       	st	Z, r1
	TCNT0=0;
    330e:	e2 e5       	ldi	r30, 0x52	; 82
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	10 82       	st	Z, r1
	OCR0=0;
    3314:	ec e5       	ldi	r30, 0x5C	; 92
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	10 82       	st	Z, r1
	TIMSK&=~(1<<TOIE0);
    331a:	a9 e5       	ldi	r26, 0x59	; 89
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	e9 e5       	ldi	r30, 0x59	; 89
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	80 81       	ld	r24, Z
    3324:	8e 7f       	andi	r24, 0xFE	; 254
    3326:	8c 93       	st	X, r24
	TIMSK&=~(1<<OCIE0);
    3328:	a9 e5       	ldi	r26, 0x59	; 89
    332a:	b0 e0       	ldi	r27, 0x00	; 0
    332c:	e9 e5       	ldi	r30, 0x59	; 89
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	80 81       	ld	r24, Z
    3332:	8d 7f       	andi	r24, 0xFD	; 253
    3334:	8c 93       	st	X, r24
}
    3336:	cf 91       	pop	r28
    3338:	df 91       	pop	r29
    333a:	08 95       	ret

0000333c <__mulsi3>:
    333c:	62 9f       	mul	r22, r18
    333e:	d0 01       	movw	r26, r0
    3340:	73 9f       	mul	r23, r19
    3342:	f0 01       	movw	r30, r0
    3344:	82 9f       	mul	r24, r18
    3346:	e0 0d       	add	r30, r0
    3348:	f1 1d       	adc	r31, r1
    334a:	64 9f       	mul	r22, r20
    334c:	e0 0d       	add	r30, r0
    334e:	f1 1d       	adc	r31, r1
    3350:	92 9f       	mul	r25, r18
    3352:	f0 0d       	add	r31, r0
    3354:	83 9f       	mul	r24, r19
    3356:	f0 0d       	add	r31, r0
    3358:	74 9f       	mul	r23, r20
    335a:	f0 0d       	add	r31, r0
    335c:	65 9f       	mul	r22, r21
    335e:	f0 0d       	add	r31, r0
    3360:	99 27       	eor	r25, r25
    3362:	72 9f       	mul	r23, r18
    3364:	b0 0d       	add	r27, r0
    3366:	e1 1d       	adc	r30, r1
    3368:	f9 1f       	adc	r31, r25
    336a:	63 9f       	mul	r22, r19
    336c:	b0 0d       	add	r27, r0
    336e:	e1 1d       	adc	r30, r1
    3370:	f9 1f       	adc	r31, r25
    3372:	bd 01       	movw	r22, r26
    3374:	cf 01       	movw	r24, r30
    3376:	11 24       	eor	r1, r1
    3378:	08 95       	ret

0000337a <__prologue_saves__>:
    337a:	2f 92       	push	r2
    337c:	3f 92       	push	r3
    337e:	4f 92       	push	r4
    3380:	5f 92       	push	r5
    3382:	6f 92       	push	r6
    3384:	7f 92       	push	r7
    3386:	8f 92       	push	r8
    3388:	9f 92       	push	r9
    338a:	af 92       	push	r10
    338c:	bf 92       	push	r11
    338e:	cf 92       	push	r12
    3390:	df 92       	push	r13
    3392:	ef 92       	push	r14
    3394:	ff 92       	push	r15
    3396:	0f 93       	push	r16
    3398:	1f 93       	push	r17
    339a:	cf 93       	push	r28
    339c:	df 93       	push	r29
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
    33a2:	ca 1b       	sub	r28, r26
    33a4:	db 0b       	sbc	r29, r27
    33a6:	0f b6       	in	r0, 0x3f	; 63
    33a8:	f8 94       	cli
    33aa:	de bf       	out	0x3e, r29	; 62
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	cd bf       	out	0x3d, r28	; 61
    33b0:	09 94       	ijmp

000033b2 <__epilogue_restores__>:
    33b2:	2a 88       	ldd	r2, Y+18	; 0x12
    33b4:	39 88       	ldd	r3, Y+17	; 0x11
    33b6:	48 88       	ldd	r4, Y+16	; 0x10
    33b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    33ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    33bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    33be:	8c 84       	ldd	r8, Y+12	; 0x0c
    33c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    33c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    33c4:	b9 84       	ldd	r11, Y+9	; 0x09
    33c6:	c8 84       	ldd	r12, Y+8	; 0x08
    33c8:	df 80       	ldd	r13, Y+7	; 0x07
    33ca:	ee 80       	ldd	r14, Y+6	; 0x06
    33cc:	fd 80       	ldd	r15, Y+5	; 0x05
    33ce:	0c 81       	ldd	r16, Y+4	; 0x04
    33d0:	1b 81       	ldd	r17, Y+3	; 0x03
    33d2:	aa 81       	ldd	r26, Y+2	; 0x02
    33d4:	b9 81       	ldd	r27, Y+1	; 0x01
    33d6:	ce 0f       	add	r28, r30
    33d8:	d1 1d       	adc	r29, r1
    33da:	0f b6       	in	r0, 0x3f	; 63
    33dc:	f8 94       	cli
    33de:	de bf       	out	0x3e, r29	; 62
    33e0:	0f be       	out	0x3f, r0	; 63
    33e2:	cd bf       	out	0x3d, r28	; 61
    33e4:	ed 01       	movw	r28, r26
    33e6:	08 95       	ret

000033e8 <itoa>:
    33e8:	fb 01       	movw	r30, r22
    33ea:	9f 01       	movw	r18, r30
    33ec:	e8 94       	clt
    33ee:	42 30       	cpi	r20, 0x02	; 2
    33f0:	c4 f0       	brlt	.+48     	; 0x3422 <itoa+0x3a>
    33f2:	45 32       	cpi	r20, 0x25	; 37
    33f4:	b4 f4       	brge	.+44     	; 0x3422 <itoa+0x3a>
    33f6:	4a 30       	cpi	r20, 0x0A	; 10
    33f8:	29 f4       	brne	.+10     	; 0x3404 <itoa+0x1c>
    33fa:	97 fb       	bst	r25, 7
    33fc:	1e f4       	brtc	.+6      	; 0x3404 <itoa+0x1c>
    33fe:	90 95       	com	r25
    3400:	81 95       	neg	r24
    3402:	9f 4f       	sbci	r25, 0xFF	; 255
    3404:	64 2f       	mov	r22, r20
    3406:	77 27       	eor	r23, r23
    3408:	0e 94 25 1a 	call	0x344a	; 0x344a <__udivmodhi4>
    340c:	80 5d       	subi	r24, 0xD0	; 208
    340e:	8a 33       	cpi	r24, 0x3A	; 58
    3410:	0c f0       	brlt	.+2      	; 0x3414 <itoa+0x2c>
    3412:	89 5d       	subi	r24, 0xD9	; 217
    3414:	81 93       	st	Z+, r24
    3416:	cb 01       	movw	r24, r22
    3418:	00 97       	sbiw	r24, 0x00	; 0
    341a:	a1 f7       	brne	.-24     	; 0x3404 <itoa+0x1c>
    341c:	16 f4       	brtc	.+4      	; 0x3422 <itoa+0x3a>
    341e:	5d e2       	ldi	r21, 0x2D	; 45
    3420:	51 93       	st	Z+, r21
    3422:	10 82       	st	Z, r1
    3424:	c9 01       	movw	r24, r18
    3426:	0c 94 15 1a 	jmp	0x342a	; 0x342a <strrev>

0000342a <strrev>:
    342a:	dc 01       	movw	r26, r24
    342c:	fc 01       	movw	r30, r24
    342e:	67 2f       	mov	r22, r23
    3430:	71 91       	ld	r23, Z+
    3432:	77 23       	and	r23, r23
    3434:	e1 f7       	brne	.-8      	; 0x342e <strrev+0x4>
    3436:	32 97       	sbiw	r30, 0x02	; 2
    3438:	04 c0       	rjmp	.+8      	; 0x3442 <strrev+0x18>
    343a:	7c 91       	ld	r23, X
    343c:	6d 93       	st	X+, r22
    343e:	70 83       	st	Z, r23
    3440:	62 91       	ld	r22, -Z
    3442:	ae 17       	cp	r26, r30
    3444:	bf 07       	cpc	r27, r31
    3446:	c8 f3       	brcs	.-14     	; 0x343a <strrev+0x10>
    3448:	08 95       	ret

0000344a <__udivmodhi4>:
    344a:	aa 1b       	sub	r26, r26
    344c:	bb 1b       	sub	r27, r27
    344e:	51 e1       	ldi	r21, 0x11	; 17
    3450:	07 c0       	rjmp	.+14     	; 0x3460 <__udivmodhi4_ep>

00003452 <__udivmodhi4_loop>:
    3452:	aa 1f       	adc	r26, r26
    3454:	bb 1f       	adc	r27, r27
    3456:	a6 17       	cp	r26, r22
    3458:	b7 07       	cpc	r27, r23
    345a:	10 f0       	brcs	.+4      	; 0x3460 <__udivmodhi4_ep>
    345c:	a6 1b       	sub	r26, r22
    345e:	b7 0b       	sbc	r27, r23

00003460 <__udivmodhi4_ep>:
    3460:	88 1f       	adc	r24, r24
    3462:	99 1f       	adc	r25, r25
    3464:	5a 95       	dec	r21
    3466:	a9 f7       	brne	.-22     	; 0x3452 <__udivmodhi4_loop>
    3468:	80 95       	com	r24
    346a:	90 95       	com	r25
    346c:	bc 01       	movw	r22, r24
    346e:	cd 01       	movw	r24, r26
    3470:	08 95       	ret

00003472 <_exit>:
    3472:	f8 94       	cli

00003474 <__stop_program>:
    3474:	ff cf       	rjmp	.-2      	; 0x3474 <__stop_program>
